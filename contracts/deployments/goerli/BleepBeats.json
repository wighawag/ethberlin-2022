{
  "address": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TheBleepMachine",
          "name": "bleepMachine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMinterAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialRoyaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "imitialRoyaltyPer10Thousands",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "initialRoyaltyAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinterAdmin",
          "type": "address"
        }
      ],
      "name": "MinterAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRoyaltyAdmin",
          "type": "address"
        }
      ],
      "name": "RoyaltyAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyPer10Thousands",
          "type": "uint256"
        }
      ],
      "name": "RoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_FOR_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "g",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "musicBytecode",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinterAdmin",
          "type": "address"
        }
      ],
      "name": "setMinterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRoyaltyAdmin",
          "type": "address"
        }
      ],
      "name": "setRoyaltyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "royaltyPer10Thousands",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "theBleepMachine",
      "outputs": [
        {
          "internalType": "contract TheBleepMachine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
    "transactionIndex": 13,
    "gasUsed": "4548304",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000020000000000800000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000180080000000000000000000000000080000000000000000000020000080000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000080000",
    "blockHash": "0xb9956828f69d312c42220db231d860166a47d7f4607ef277c0f47c61752a2ce9",
    "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 7664638,
        "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
        "address": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
        "topics": [
          "0xe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e"
        ],
        "data": "0x0000000000000000000000009a3b0d0b08fb71f1a5e0f248ad3a42c341f7837c",
        "logIndex": 33,
        "blockHash": "0xb9956828f69d312c42220db231d860166a47d7f4607ef277c0f47c61752a2ce9"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 7664638,
        "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
        "address": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
        "topics": [
          "0xb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c89"
        ],
        "data": "0x000000000000000000000000e53cd71271acadbeb0f64d9c8c62bbddc8ca9e66",
        "logIndex": 34,
        "blockHash": "0xb9956828f69d312c42220db231d860166a47d7f4607ef277c0f47c61752a2ce9"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 7664638,
        "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
        "address": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
        "topics": [
          "0xb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef41"
        ],
        "data": "0x000000000000000000000000e53cd71271acadbeb0f64d9c8c62bbddc8ca9e66",
        "logIndex": 35,
        "blockHash": "0xb9956828f69d312c42220db231d860166a47d7f4607ef277c0f47c61752a2ce9"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 7664638,
        "transactionHash": "0x4f9448300b7bac4c97c40b2073d27fe6137065887d4635586e787184d4356c9d",
        "address": "0x5aed6989B1D28d12D41E9437AA1a5b1cCa1B65f3",
        "topics": [
          "0xb744dc8fdcd17f69ad99fdabe0fe0ed8fea41193727ed2123d997550eaae918f"
        ],
        "data": "0x0000000000000000000000009a3b0d0b08fb71f1a5e0f248ad3a42c341f7837c0000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 36,
        "blockHash": "0xb9956828f69d312c42220db231d860166a47d7f4607ef277c0f47c61752a2ce9"
      }
    ],
    "blockNumber": 7664638,
    "cumulativeGasUsed": "24615893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A890126c932d49c2D761dcc6a8E9F7A7a8e40B5",
    "0x9a3b0D0B08fb71F1a5E0F248Ad3a42C341f7837c",
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0x9a3b0D0B08fb71F1a5E0F248Ad3a42C341f7837c",
    50,
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66"
  ],
  "numDeployments": 4,
  "solcInputHash": "deb4a0f943399ab93cf846f577548e70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TheBleepMachine\",\"name\":\"bleepMachine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMinterAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRoyaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"imitialRoyaltyPer10Thousands\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"initialRoyaltyAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinterAdmin\",\"type\":\"address\"}],\"name\":\"MinterAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRoyaltyAdmin\",\"type\":\"address\"}],\"name\":\"RoyaltyAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyPer10Thousands\",\"type\":\"uint256\"}],\"name\":\"RoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"g\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"musicBytecode\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinterAdmin\",\"type\":\"address\"}],\"name\":\"setMinterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyAdmin\",\"type\":\"address\"}],\"name\":\"setRoyaltyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyPer10Thousands\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theBleepMachine\",\"outputs\":[{\"internalType\":\"contract TheBleepMachine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"constructor\":{\"details\":\"Setup the roles\",\"params\":{\"bleepMachine\":\"the Bleep Machine that generate the music\",\"imitialRoyaltyPer10Thousands\":\"amount of royalty in 10,000 basis point\",\"initialGuardian\":\"guardian able to immortalize rules\",\"initialMinterAdmin\":\"admin able to set the minter contract.\",\"initialRoyaltyAdmin\":\"admin able to update the royalty receiver and rates.\",\"initialRoyaltyReceiver\":\"receiver of royalties\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract.\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data.\"}},\"nonces(address)\":{\"params\":{\"account\":\"the account to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"nonces(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"ids\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"\":\"//id - the token queried for royalty information.\",\"salePrice\":\"- the sale price of the token specified by id.\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment.\",\"royaltyAmount\":\"- the royalty payment amount for salePrice.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setRoyaltyParameters(address,uint96)\":{\"params\":{\"newReceiver\":\"the address that should receive the royalty proceeds.\",\"royaltyPer10Thousands\":\"the share of the salePrice (in 1/10000) given to the receiver.\"}},\"tokenNonces(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to transfer a specific token on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"guardian()\":{\"notice\":\"guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules. For example: the royalty setup could be frozen.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"minter()\":{\"notice\":\"address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic Once all 1024 potential bleeps (there could be less, at minimum there are 576 bleeps) are minted, no minter can mint anymore\"},\"minterAdmin()\":{\"notice\":\"minterAdmin can update the minter. At the time being there is 576 Bleeps but there is space for extra instrument and the upper limit is 1024. could be given to the DAO later so instrument can be added, the sale of these new bleeps could benenfit the DAO too and add new members.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract.\"},\"nonces(address)\":{\"notice\":\"return the account nonce, used for approvalForAll permit or other account related matter\"},\"nonces(uint256)\":{\"notice\":\"return the token nonce, used for individual approve permit or other token related matter\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"royaltyAdmin()\":{\"notice\":\"address allowed to set royalty parameters\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Called with the sale price to determine how much royalty is owed and to whom.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setGuardian(address)\":{\"notice\":\"set the new guardian that can freeze the other admins (except owner). Can only be called by the current guardian.\"},\"setMinter(address)\":{\"notice\":\"set the new minter that can mint Can only be called by the minter admin.\"},\"setMinterAdmin(address)\":{\"notice\":\"set the new minterAdmin that can set the minter for Bleeps Can only be called by the current minter admin.\"},\"setRoyaltyAdmin(address)\":{\"notice\":\"set the new royaltyAdmin that can change the royalties Can only be called by the current royalty admin.\"},\"setRoyaltyParameters(address,uint96)\":{\"notice\":\"set a new royalty receiver and rate, Can only be set by the `royaltyAdmin`.\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract.\"},\"tokenNonces(uint256)\":{\"notice\":\"return the token nonce, used for individual approve permit or other token related matter\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BleepBeats.sol\":\"BleepBeats\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/BleepBeats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport \\\"./ERC721/implementations/ERC721.sol\\\";\\nimport \\\"./ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\\\";\\nimport \\\"./Multicall/UsingMulticall.sol\\\";\\nimport \\\"./ERC721/implementations/UsingExternalMinter.sol\\\";\\nimport \\\"./ERC2981/implementations/UsingGlobalRoyalties.sol\\\";\\nimport \\\"./Guardian/implementations/UsingGuardian.sol\\\";\\nimport \\\"./TheBleepMachine.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ncontract BleepBeats is\\n\\tERC721,\\n\\tUsingERC4494PermitWithDynamicChainId,\\n\\tUsingMulticall,\\n\\tUsingGuardian,\\n\\tUsingExternalMinter,\\n\\tUsingGlobalRoyalties\\n{\\n\\tTheBleepMachine public immutable theBleepMachine;\\n\\n\\tbytes32 constant HEX = \\\"0123456789abcdef0000000000000000\\\";\\n\\n\\t/// @dev Setup the roles\\n\\t/// @param bleepMachine the Bleep Machine that generate the music\\n\\t/// @param initialMinterAdmin admin able to set the minter contract.\\n\\t/// @param initialRoyaltyAdmin admin able to update the royalty receiver and rates.\\n\\t/// @param initialGuardian guardian able to immortalize rules\\n\\t/// @param initialRoyaltyReceiver receiver of royalties\\n\\t/// @param imitialRoyaltyPer10Thousands amount of royalty in 10,000 basis point\\n\\tconstructor(\\n\\t\\tTheBleepMachine bleepMachine,\\n\\t\\taddress initialGuardian,\\n\\t\\taddress initialMinterAdmin,\\n\\t\\taddress initialRoyaltyReceiver,\\n\\t\\tuint96 imitialRoyaltyPer10Thousands,\\n\\t\\taddress initialRoyaltyAdmin\\n\\t)\\n\\t\\tUsingExternalMinter(initialMinterAdmin)\\n\\t\\tUsingGlobalRoyalties(initialRoyaltyReceiver, imitialRoyaltyPer10Thousands, initialRoyaltyAdmin)\\n\\t\\tUsingGuardian(initialGuardian)\\n\\t{\\n\\t\\ttheBleepMachine = bleepMachine;\\n\\t}\\n\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract.\\n\\tfunction name() public pure override returns (string memory) {\\n\\t\\treturn \\\"Bleep Beats\\\";\\n\\t}\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract.\\n\\tfunction symbol() external pure returns (string memory) {\\n\\t\\treturn \\\"BBS\\\";\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 id)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC721, UsingERC4494Permit, UsingGlobalRoyalties)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(id);\\n\\t}\\n\\n\\tfunction mint(address to, bytes memory musicBytecode) external {\\n\\t\\tuint256 len = musicBytecode.length;\\n\\t\\trequire(len <= 32, \\\"TOO_LONG\\\");\\n\\t\\tuint256 id;\\n\\t\\tassembly {\\n\\t\\t\\tid := shr(mul(sub(32, len), 8), mload(add(musicBytecode, 32)))\\n\\t\\t}\\n\\n\\t\\t// TODO require(msg.sender == minter, \\\"NOT_AUTHORIZED\\\");\\n\\t\\t_mint(id, to);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) external returns (string memory str) {\\n\\t\\tuint256 shift;\\n\\t\\tunchecked {\\n\\t\\t\\tshift = (Utils.numLeadingZeroes(id) / 8) * 8;\\n\\t\\t}\\n\\t\\tid = id << shift;\\n\\t\\tbytes memory musicBytecode = new bytes((256 - shift) / 8);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(musicBytecode, 32), id)\\n\\t\\t}\\n\\n\\t\\tstr = string(\\n\\t\\t\\tbytes.concat(\\n\\t\\t\\t\\t'data:application/json,{\\\"name\\\":\\\"The%20Bleep%20Machine\\\",\\\"description\\\":\\\"The%20Bleep%20Machine%20produces%20music%20from%20EVM%20bytecode.\\\",\\\"external_url\\\":\\\"TODO\\\",\\\"image\\\":\\\"',\\n\\t\\t\\t\\t\\\"data:image/svg+xml;charset=utf8,<svg%2520xmlns='http://www.w3.org/2000/svg'%2520shape-rendering='crispEdges'%2520width='512'%2520height='512'><style>*{background-color:white}.b{animation:ba%25201s%2520steps(5,start)%2520infinite;-webkit-animation:ba%25201s%2520steps(5,start)%2520infinite;}@keyframes%2520ba{to{visibility: hidden;}}@-webkit-keyframes%2520ba{to{visibility:hidden;}}.b01{ animation-delay:.031s}.b02{animation-delay:.062s}.b03{animation-delay:.093s}.b04{animation-delay:.124s}.b05{animation-delay:.155s}.b06{animation-delay:.186s}.b07{animation-delay:.217s}.b08{animation-delay:.248s}.b09{animation-delay:.279s}.b10{animation-delay:.310s}.b11{animation-delay:.342s}.b12{animation-delay:.373s}.b13{animation-delay:.403s}.b14{animation-delay:.434s}.b15{animation-delay:.465s}.b16{animation-delay:.496s}.b17{animation-delay:.527s}.b18{animation-delay:.558s}.b19{animation-delay:.589s}.b20{animation-delay:.620s}.b21{animation-delay:.651s}.b22{animation-delay:.682s}.b23{animation-delay:.713s}.b24{animation-delay:.744s}.b25{animation-delay:.775s}.b26{animation-delay:.806s}.b27{animation-delay:.837s}.b28{animation-delay:.868s}.b29{animation-delay:.899s}.b30{animation-delay:.930s}.b31{animation-delay:.961s}.b32{animation-delay:.992s}</style><defs><path%2520id='Z'%2520d='M0,0h1v1h-1z'/><use%2520id='0'%2520href='%2523Z'%2520fill='%2523000c24'/><use%2520id='1'%2520href='%2523Z'%2520fill='%25239e0962'/><use%2520id='2'%2520href='%2523Z'%2520fill='%2523ff1c3a'/><use%2520id='3'%2520href='%2523Z'%2520fill='%2523bc0b22'/><use%2520id='4'%2520href='%2523Z'%2520fill='%2523ff991c'/><use%2520id='5'%2520href='%2523Z'%2520fill='%2523c16a00'/><use%2520id='6'%2520href='%2523Z'%2520fill='%2523ffe81c'/><use%2520id='7'%2520href='%2523Z'%2520fill='%25239e8b00'/><use%2520id='8'%2520href='%2523Z'%2520fill='%252323e423'/><use%2520id='9'%2520href='%2523Z'%2520fill='%2523009900'/><use%2520id='a'%2520href='%2523Z'%2520fill='%25231adde0'/><use%2520id='b'%2520href='%2523Z'%2520fill='%2523008789'/><use%2520id='c'%2520href='%2523Z'%2520fill='%25233d97ff'/><use%2520id='d'%2520href='%2523Z'%2520fill='%25233e5ca0'/><use%2520id='e'%2520href='%2523Z'%2520fill='%2523831bf9'/><use%2520id='f'%2520href='%2523Z'%2520fill='%2523522982'/></defs><g%2520transform='scale(64)'><use%2520x='00'%2520class='b%2520b01'%2520y='00'%2520href='%25230'/><use%2520x='01'%2520y='00'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b02'%2520y='00'%2520href='%25230'/><use%2520x='03'%2520y='00'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b03'%2520y='00'%2520href='%25230'/><use%2520x='05'%2520y='00'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b04'%2520y='00'%2520href='%25230'/><use%2520x='07'%2520y='00'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b05'%2520y='01'%2520href='%25230'/><use%2520x='01'%2520y='01'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b06'%2520y='01'%2520href='%25230'/><use%2520x='03'%2520y='01'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b07'%2520y='01'%2520href='%25230'/><use%2520x='05'%2520y='01'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b08'%2520y='01'%2520href='%25230'/><use%2520x='07'%2520y='01'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b09'%2520y='02'%2520href='%25230'/><use%2520x='01'%2520y='02'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b10'%2520y='02'%2520href='%25230'/><use%2520x='03'%2520y='02'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b11'%2520y='02'%2520href='%25230'/><use%2520x='05'%2520y='02'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b12'%2520y='02'%2520href='%25230'/><use%2520x='07'%2520y='02'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b13'%2520y='03'%2520href='%25230'/><use%2520x='01'%2520y='03'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b14'%2520y='03'%2520href='%25230'/><use%2520x='03'%2520y='03'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b15'%2520y='03'%2520href='%25230'/><use%2520x='05'%2520y='03'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b16'%2520y='03'%2520href='%25230'/><use%2520x='07'%2520y='03'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b17'%2520y='04'%2520href='%25230'/><use%2520x='01'%2520y='04'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b18'%2520y='04'%2520href='%25230'/><use%2520x='03'%2520y='04'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b19'%2520y='04'%2520href='%25230'/><use%2520x='05'%2520y='04'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b20'%2520y='04'%2520href='%25230'/><use%2520x='07'%2520y='04'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b21'%2520y='05'%2520href='%25230'/><use%2520x='01'%2520y='05'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b22'%2520y='05'%2520href='%25230'/><use%2520x='03'%2520y='05'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b23'%2520y='05'%2520href='%25230'/><use%2520x='05'%2520y='05'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b24'%2520y='05'%2520href='%25230'/><use%2520x='07'%2520y='05'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b25'%2520y='06'%2520href='%25230'/><use%2520x='01'%2520y='06'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b26'%2520y='06'%2520href='%25230'/><use%2520x='03'%2520y='06'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b27'%2520y='06'%2520href='%25230'/><use%2520x='05'%2520y='06'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b28'%2520y='06'%2520href='%25230'/><use%2520x='07'%2520y='06'%2520href='%25230'/><use%2520x='00'%2520class='b%2520b29'%2520y='07'%2520href='%25230'/><use%2520x='01'%2520y='07'%2520href='%25230'/><use%2520x='02'%2520class='b%2520b30'%2520y='07'%2520href='%25230'/><use%2520x='03'%2520y='07'%2520href='%25230'/><use%2520x='04'%2520class='b%2520b31'%2520y='07'%2520href='%25230'/><use%2520x='05'%2520y='07'%2520href='%25230'/><use%2520x='06'%2520class='b%2520b32'%2520y='07'%2520href='%25230'/><use%2520x='07'%2520y='07'%2520href='%25230'/></g></svg>\\\",\\n\\t\\t\\t\\t'\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,',\\n\\t\\t\\t\\tbytes(Base64.encode(theBleepMachine.WAV(musicBytecode, 0, 100000))),\\n\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < 64; i += 2) {\\n\\t\\t\\tuint256 pre = i / 2;\\n\\t\\t\\tuint8 v = uint8(bytes32(id)[pre]);\\n\\t\\t\\tbytes(str)[(pre * 22) + 167 + 2327 + i * 46] = HEX[uint8(v >> 4)];\\n\\t\\t\\tbytes(str)[(pre * 22) + 167 + 2327 + 46 + i * 46] = HEX[uint8(v & 0x0F)];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(uint256 id, address to) internal {\\n\\t\\trequire(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"NOT_TO_THIS\\\");\\n\\t\\taddress owner = _ownerOf(id);\\n\\t\\trequire(owner == address(0), \\\"ALREADY_CREATED\\\");\\n\\t\\t_safeTransferFrom(address(0), to, id, \\\"\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x39bd01346fce9c2ac547154888977c694d1f87a66400d2924ab960091f97d28e\",\"license\":\"AGPL-3.0-or-later\"},\"src/ERC165/UsingERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nabstract contract UsingERC165Internal {\\n\\tfunction supportsInterface(bytes4) public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n}\\n\",\"keccak256\":\"0x46039587082f50a70a5e466a40673adb34205fa81fdfc20fcf5ca9d7ef5ac08f\",\"license\":\"MIT\"},\"src/ERC2981/implementations/UsingGlobalRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IERC2981.sol\\\";\\nimport \\\"../../ERC165/UsingERC165Internal.sol\\\";\\nimport \\\"../../Guardian/libraries/Guarded.sol\\\";\\n\\ncontract UsingGlobalRoyalties is IERC2981, UsingERC165Internal {\\n\\tevent RoyaltySet(address receiver, uint256 royaltyPer10Thousands);\\n\\tevent RoyaltyAdminSet(address newRoyaltyAdmin);\\n\\n\\tstruct Royalty {\\n\\t\\taddress receiver;\\n\\t\\tuint96 per10Thousands;\\n\\t}\\n\\n\\tRoyalty internal _royalty;\\n\\n\\t/// @notice address allowed to set royalty parameters\\n\\taddress public royaltyAdmin;\\n\\n\\t/// @param initialRoyaltyReceiver receiver of royalties\\n\\t/// @param imitialRoyaltyPer10Thousands amount of royalty in 10,000 basis point\\n\\t/// @param initialRoyaltyAdmin admin able to update the royalty receiver and rates\\n\\tconstructor(\\n\\t\\taddress initialRoyaltyReceiver,\\n\\t\\tuint96 imitialRoyaltyPer10Thousands,\\n\\t\\taddress initialRoyaltyAdmin\\n\\t) {\\n\\t\\tif (initialRoyaltyAdmin != address(0)) {\\n\\t\\t\\troyaltyAdmin = initialRoyaltyAdmin;\\n\\t\\t\\temit RoyaltyAdminSet(initialRoyaltyAdmin);\\n\\t\\t}\\n\\n\\t\\t_royalty.receiver = initialRoyaltyReceiver;\\n\\t\\t_royalty.per10Thousands = imitialRoyaltyPer10Thousands;\\n\\t\\temit RoyaltySet(initialRoyaltyReceiver, imitialRoyaltyPer10Thousands);\\n\\t}\\n\\n\\t/// @notice Called with the sale price to determine how much royalty is owed and to whom.\\n\\t/// @param //id - the token queried for royalty information.\\n\\t/// @param salePrice - the sale price of the token specified by id.\\n\\t/// @return receiver - address of who should be sent the royalty payment.\\n\\t/// @return royaltyAmount - the royalty payment amount for salePrice.\\n\\tfunction royaltyInfo(\\n\\t\\tuint256, /*id*/\\n\\t\\tuint256 salePrice\\n\\t) external view returns (address receiver, uint256 royaltyAmount) {\\n\\t\\treceiver = _royalty.receiver;\\n\\t\\troyaltyAmount = (salePrice * uint256(_royalty.per10Thousands)) / 10000;\\n\\t}\\n\\n\\t/// @notice set a new royalty receiver and rate, Can only be set by the `royaltyAdmin`.\\n\\t/// @param newReceiver the address that should receive the royalty proceeds.\\n\\t/// @param royaltyPer10Thousands the share of the salePrice (in 1/10000) given to the receiver.\\n\\tfunction setRoyaltyParameters(address newReceiver, uint96 royaltyPer10Thousands) external {\\n\\t\\trequire(msg.sender == royaltyAdmin, \\\"NOT_AUTHORIZED\\\");\\n\\t\\trequire(royaltyPer10Thousands <= 50, \\\"ROYALTY_TOO_HIGH\\\");\\n\\t\\tif (_royalty.receiver != newReceiver || _royalty.per10Thousands != royaltyPer10Thousands) {\\n\\t\\t\\t_royalty.receiver = newReceiver;\\n\\t\\t\\t_royalty.per10Thousands = royaltyPer10Thousands;\\n\\t\\t\\temit RoyaltySet(newReceiver, royaltyPer10Thousands);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice set the new royaltyAdmin that can change the royalties\\n\\t * Can only be called by the current royalty admin.\\n\\t */\\n\\tfunction setRoyaltyAdmin(address newRoyaltyAdmin) external {\\n\\t\\trequire(msg.sender == royaltyAdmin || Guarded.isGuardian(msg.sender, newRoyaltyAdmin), \\\"NOT_AUTHORIZED\\\");\\n\\t\\tif (royaltyAdmin != newRoyaltyAdmin) {\\n\\t\\t\\troyaltyAdmin = newRoyaltyAdmin;\\n\\t\\t\\temit RoyaltyAdminSet(newRoyaltyAdmin);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Check if the contract supports an interface.\\n\\t/// @param id The id of the interface.\\n\\t/// @return Whether the interface is supported.\\n\\tfunction supportsInterface(bytes4 id) public view virtual override(IERC165, UsingERC165Internal) returns (bool) {\\n\\t\\treturn super.supportsInterface(id) || id == 0x2a55205a; /// 0x2a55205a is ERC2981 (royalty standard)\\n\\t}\\n}\\n\",\"keccak256\":\"0x670dfcf434c80a21529328ae65e0ba975d7c2158af8cfac9b71643da68d88d75\",\"license\":\"MIT\"},\"src/ERC2981/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IERC2981 is IERC165 {\\n\\tfunction royaltyInfo(uint256 id, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x72a972740b4110dbb0638db7a73bdcb442e45e733b11a57307a0e0863dd4f870\",\"license\":\"MIT\"},\"src/ERC712/implementations/ImplementingExternalDomainSeparator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nabstract contract ImplementingExternalDomainSeparator {\\n\\tfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32);\\n}\\n\",\"keccak256\":\"0xaf3706a243811b2658058b689b58e072058bdad4037d6b7772da878df11dc7be\",\"license\":\"MIT\"},\"src/ERC712/implementations/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nabstract contract Named {\\n\\tfunction name() public view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x9d1b9ef80c064a9bfb929b35b5d1ea5cb20035164716aec973ee6ee637b765f6\",\"license\":\"MIT\"},\"src/ERC712/implementations/UsingERC712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IERC5267.sol\\\";\\n\\nabstract contract UsingERC712 is IERC5267 {}\\n\",\"keccak256\":\"0x6a89a6ef3974afd08dc82b35187807d6ef39cb46c6ad2ed8d3182f8b872c794a\",\"license\":\"MIT\"},\"src/ERC712/implementations/UsingERC712WithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./UsingERC712.sol\\\";\\nimport \\\"./Named.sol\\\";\\n\\nabstract contract UsingERC712WithDynamicChainId is UsingERC712, Named {\\n\\tuint256 private immutable _deploymentChainId;\\n\\tbytes32 private immutable _deploymentDomainSeparator;\\n\\n\\tconstructor() {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t_deploymentChainId = chainId;\\n\\t\\t_deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n\\t}\\n\\n\\tfunction _currentDomainSeparator() internal view returns (bytes32) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t// in case a fork happen, to support the chain that had to change its chainId, we compute the domain operator\\n\\t\\treturn chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\\n\\t}\\n\\n\\t/// @dev Calculate the Domain Separator used to compute ERC712 hash\\n\\tfunction _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tkeccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n\\t\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\t\\tchainId,\\n\\t\\t\\t\\t\\taddress(this)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tbytes1,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tbytes32,\\n\\t\\t\\tuint256[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\t// 0x0D == 01101 (name, , chainId, verifyingContract)\\n\\t\\treturn (0x0D, name(), \\\"\\\", chainId, address(this), bytes32(0), new uint256[](0));\\n\\t}\\n}\\n\",\"keccak256\":\"0x144e37f1c3ba9d62e44d1a874b7fafecc9ef37078b8228f1ce21c14188815d91\",\"license\":\"MIT\"},\"src/ERC712/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface IERC5267 {\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbytes1 fields,\\n\\t\\t\\tstring memory name,\\n\\t\\t\\tstring memory version,\\n\\t\\t\\tuint256 chainId,\\n\\t\\t\\taddress verifyingContract,\\n\\t\\t\\tbytes32 salt,\\n\\t\\t\\tuint256[] memory extensions\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x177426c414d6351b612ad4790721427575678b021e4d00f5507aeda7420c9f84\",\"license\":\"MIT\"},\"src/ERC721/ERC4494/implementations/UsingERC4494Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../../implementations/ImplementingERC721Internal.sol\\\";\\nimport \\\"../../../ERC165/UsingERC165Internal.sol\\\";\\nimport \\\"../interfaces/IERC4494.sol\\\";\\nimport \\\"../../../ERC712/implementations/UsingERC712WithDynamicChainId.sol\\\";\\nimport \\\"../../../ERC712/implementations/ImplementingExternalDomainSeparator.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract UsingERC4494Permit is\\n\\tIERC4494,\\n\\tImplementingERC721Internal,\\n\\tUsingERC165Internal,\\n\\tImplementingExternalDomainSeparator,\\n\\tUsingERC712\\n{\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH =\\n\\t\\tkeccak256(\\\"PermitForAll(address spender,uint256 nonce,uint256 deadline)\\\");\\n\\n\\tmapping(address => uint256) internal _userNonces;\\n\\n\\t/// @notice return the account nonce, used for approvalForAll permit or other account related matter\\n\\t/// @param account the account to query\\n\\t/// @return nonce\\n\\tfunction nonces(address account) external view virtual returns (uint256 nonce) {\\n\\t\\treturn _userNonces[account];\\n\\t}\\n\\n\\t/// @notice return the token nonce, used for individual approve permit or other token related matter\\n\\t/// @param id token id to query\\n\\t/// @return nonce\\n\\tfunction nonces(uint256 id) public view virtual returns (uint256 nonce) {\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\treturn blockNumber;\\n\\t}\\n\\n\\t/// @notice return the token nonce, used for individual approve permit or other token related matter\\n\\t/// @param id token id to query\\n\\t/// @return nonce\\n\\tfunction tokenNonces(uint256 id) external view returns (uint256 nonce) {\\n\\t\\treturn nonces(id);\\n\\t}\\n\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(tokenId);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\n\\t\\t// We use blockNumber as nonce as we already store it per tokens. It can thus act as an increasing transfer counter.\\n\\t\\t// while technically multiple transfer could happen in the same block, the signed message would be using a previous block.\\n\\t\\t// And the transfer would use then a more recent blockNumber, invalidating that message when transfer is executed.\\n\\t\\t_requireValidPermit(owner, spender, tokenId, deadline, blockNumber, sig);\\n\\n\\t\\t_approveFor(owner, blockNumber, spender, tokenId);\\n\\t}\\n\\n\\tfunction permitForAll(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n\\t\\t_requireValidPermitForAll(signer, spender, deadline, _userNonces[signer]++, sig);\\n\\n\\t\\t_setApprovalForAll(signer, spender, true);\\n\\t}\\n\\n\\t/// @notice Check if the contract supports an interface.\\n\\t/// @param id The id of the interface.\\n\\t/// @return Whether the interface is supported.\\n\\tfunction supportsInterface(bytes4 id) public view virtual override(IERC165, UsingERC165Internal) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tsuper.supportsInterface(id) ||\\n\\t\\t\\tid == type(IERC4494).interfaceId ||\\n\\t\\t\\tid == type(IERC4494Alternative).interfaceId;\\n\\t}\\n\\n\\tfunction DOMAIN_SEPARATOR()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC4494, ImplementingExternalDomainSeparator)\\n\\t\\treturns (bytes32);\\n\\n\\t// -------------------------------------------------------- INTERNAL --------------------------------------------------------------------\\n\\n\\tfunction _requireValidPermit(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 id,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(SignatureChecker.isValidSignatureNow(signer, digest, sig), \\\"INVALID_SIGNATURE\\\");\\n\\t}\\n\\n\\tfunction _requireValidPermitForAll(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_FOR_ALL_TYPEHASH, spender, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(SignatureChecker.isValidSignatureNow(signer, digest, sig), \\\"INVALID_SIGNATURE\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xca258b458d70d31e409236e462af3d251c3ad3cca4a396f8ba75b0a43ab73ec3\",\"license\":\"MIT\"},\"src/ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./UsingERC4494Permit.sol\\\";\\n\\nabstract contract UsingERC4494PermitWithDynamicChainId is UsingERC4494Permit, UsingERC712WithDynamicChainId {\\n\\tfunction DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n\\t\\treturn _currentDomainSeparator();\\n\\t}\\n}\\n\",\"keccak256\":\"0xbbcd2332a92f391ad37724fd8beab23f800de912eff5a34cdcb4a180ea51151b\",\"license\":\"MIT\"},\"src/ERC721/ERC4494/interfaces/IERC4494.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IERC4494 is IERC165 {\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return current token nonce\\n\\tfunction nonces(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\\ninterface IERC4494Alternative is IERC165 {\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return current token nonce\\n\\tfunction tokenNonces(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xfa0e021fd4b85fe3f249e0dc3ea7a2adb18f10efd14896d59bd815c8c505db61\",\"license\":\"MIT\"},\"src/ERC721/implementations/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nabstract contract ERC721 is IERC721, ImplementingERC721Internal {\\n\\tusing Address for address;\\n\\n\\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\tbytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n\\tuint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\tuint256 internal constant NOT_OPERATOR_FLAG = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\tmapping(uint256 => uint256) internal _owners;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t/// @notice Approve an operator to transfer a specific token on the senders behalf.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param id The id of the token.\\n\\tfunction approve(address operator, uint256 id) external override {\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"UNAUTHORIZED_APPROVAL\\\");\\n\\t\\t_approveFor(owner, blockNumber, operator, id);\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) external override {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(owner == from, \\\"NOT_OWNER\\\");\\n\\t\\trequire(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"NOT_TO_THIS\\\");\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(operatorEnabled && _operators[id] == msg.sender) || isApprovedForAll(from, msg.sender),\\n\\t\\t\\t\\t\\\"UNAUTHORIZED_TRANSFER\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, id);\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n\\t/// @param from The send of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) external override {\\n\\t\\tsafeTransferFrom(from, to, id, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice Set the approval for an operator to manage all the tokens of the sender.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param approved The determination of the approval.\\n\\tfunction setApprovalForAll(address operator, bool approved) external override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) public view override returns (uint256 balance) {\\n\\t\\trequire(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n\\t\\tbalance = _balances[owner];\\n\\t}\\n\\n\\t/// @notice Get the owner of a token.\\n\\t/// @param id The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\tfunction ownerOf(uint256 id) external view override returns (address owner) {\\n\\t\\towner = _ownerOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t}\\n\\n\\t/// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n\\t/// @param id The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\t/// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n\\t\\treturn _ownerAndBlockNumberOf(id);\\n\\t}\\n\\n\\tstruct OwnerData {\\n\\t\\taddress owner;\\n\\t\\tuint256 lastTransferBlockNumber;\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param ids The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 data = _owners[ids[i]];\\n\\t\\t\\townersData[i].owner = address(uint160(data));\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Get the approved operator for a specific token.\\n\\t/// @param id The id of the token.\\n\\t/// @return The address of the operator.\\n\\tfunction getApproved(uint256 id) external view override returns (address) {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\treturn _operators[id];\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Check if the sender approved the operator.\\n\\t/// @param owner The address of the owner.\\n\\t/// @param operator The address of the operator.\\n\\t/// @return isOperator The status of the approval.\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n\\t\\treturn _operatorsForAll[owner][operator];\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\t/// @param data Additional data.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory data\\n\\t) public override {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(owner == from, \\\"NOT_OWNER\\\");\\n\\t\\trequire(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"NOT_TO_THIS\\\");\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(operatorEnabled && _operators[id] == msg.sender) || isApprovedForAll(from, msg.sender),\\n\\t\\t\\t\\t\\\"UNAUTHORIZED_TRANSFER\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_safeTransferFrom(from, to, id, data);\\n\\t}\\n\\n\\t/// @notice Check if the contract supports an interface.\\n\\t/// @param id The id of the interface.\\n\\t/// @return Whether the interface is supported.\\n\\tfunction supportsInterface(bytes4 id) public view virtual override returns (bool) {\\n\\t\\t/// 0x01ffc9a7 is ERC165.\\n\\t\\t/// 0x80ac58cd is ERC721\\n\\t\\t/// 0x5b5e139f is for ERC721 metadata\\n\\t\\treturn id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n\\t}\\n\\n\\t// TODO : function tokenURI(uint256 id) external view virtual returns (string memory);\\n\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory data\\n\\t) internal {\\n\\t\\t_transferFrom(from, to, id);\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\trequire(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) internal {\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[to]++;\\n\\t\\t\\tif (from != address(0)) {\\n\\t\\t\\t\\t_balances[from]--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_owners[id] = (block.number << 160) | uint256(uint160(to));\\n\\t\\temit Transfer(from, to, id);\\n\\t}\\n\\n\\t/// @dev See approve.\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 blockNumber,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal override {\\n\\t\\tif (operator == address(0)) {\\n\\t\\t\\t_owners[id] = (blockNumber << 160) | uint256(uint160(owner));\\n\\t\\t} else {\\n\\t\\t\\t_owners[id] = OPERATOR_FLAG | (blockNumber << 160) | uint256(uint160(owner));\\n\\t\\t\\t_operators[id] = operator;\\n\\t\\t}\\n\\t\\temit Approval(owner, operator, id);\\n\\t}\\n\\n\\t/// @dev See setApprovalForAll.\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal override {\\n\\t\\t_operatorsForAll[sender][operator] = approved;\\n\\n\\t\\temit ApprovalForAll(sender, operator, approved);\\n\\t}\\n\\n\\t/// @dev Check if receiving contract accepts erc721 transfers.\\n\\t/// @param operator The address of the operator.\\n\\t/// @param from The from address, may be different from msg.sender.\\n\\t/// @param to The adddress we want to transfer to.\\n\\t/// @param id The id of the token we would like to transfer.\\n\\t/// @param _data Any additional data to send with the transfer.\\n\\t/// @return Whether the expected value of 0x150b7a02 is returned.\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory _data\\n\\t) internal returns (bool) {\\n\\t\\tbytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, _data);\\n\\t\\treturn (retval == ERC721_RECEIVED);\\n\\t}\\n\\n\\t/// @dev See ownerOf\\n\\tfunction _ownerOf(uint256 id) internal view returns (address owner) {\\n\\t\\treturn address(uint160(_owners[id]));\\n\\t}\\n\\n\\t/// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return blockNumber the blockNumber at which the owner became the owner (last transfer).\\n\\tfunction _ownerAndBlockNumberOf(uint256 id) internal view override returns (address owner, uint256 blockNumber) {\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\tblockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7cfd6bf124b95cce39b8bb3a23f9610e4b95fd387fa96ca57b060b9338b3ad3\",\"license\":\"MIT\"},\"src/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nabstract contract ImplementingERC721Internal {\\n\\tfunction _ownerAndBlockNumberOf(uint256 id) internal view virtual returns (address owner, uint256 blockNumber);\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 blockNumber,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal virtual;\\n\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual;\\n}\\n\",\"keccak256\":\"0x4fddf929f897d3a0d911defb6ed4347da3422ee45e200fffaef78b13db431840\",\"license\":\"MIT\"},\"src/ERC721/implementations/UsingExternalMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../../Guardian/libraries/Guarded.sol\\\";\\n\\ncontract UsingExternalMinter {\\n\\tevent MinterAdminSet(address newMinterAdmin);\\n\\tevent MinterSet(address newMinter);\\n\\n\\t/// @notice minterAdmin can update the minter. At the time being there is 576 Bleeps but there is space for extra instrument and the upper limit is 1024.\\n\\t/// could be given to the DAO later so instrument can be added, the sale of these new bleeps could benenfit the DAO too and add new members.\\n\\taddress public minterAdmin;\\n\\n\\t/// @notice address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic\\n\\t/// Once all 1024 potential bleeps (there could be less, at minimum there are 576 bleeps) are minted, no minter can mint anymore\\n\\taddress public minter;\\n\\n\\tconstructor(address initialMinterAdmin) {\\n\\t\\tif (initialMinterAdmin != address(0)) {\\n\\t\\t\\tminterAdmin = initialMinterAdmin;\\n\\t\\t\\temit MinterAdminSet(initialMinterAdmin);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice set the new minterAdmin that can set the minter for Bleeps\\n\\t * Can only be called by the current minter admin.\\n\\t */\\n\\tfunction setMinterAdmin(address newMinterAdmin) external {\\n\\t\\trequire(msg.sender == minterAdmin || Guarded.isGuardian(msg.sender, newMinterAdmin), \\\"NOT_AUTHORIZED\\\");\\n\\t\\tif (newMinterAdmin != minterAdmin) {\\n\\t\\t\\tminterAdmin = newMinterAdmin;\\n\\t\\t\\temit MinterAdminSet(newMinterAdmin);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice set the new minter that can mint\\n\\t * Can only be called by the minter admin.\\n\\t */\\n\\tfunction setMinter(address newMinter) external {\\n\\t\\trequire(msg.sender == minterAdmin, \\\"NOT_AUTHORIZED\\\");\\n\\t\\tif (minter != newMinter) {\\n\\t\\t\\tminter = newMinter;\\n\\t\\t\\temit MinterSet(newMinter);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f2ea37fd395f67513224f7b5e9f0f00117b2d068ea3a2e47db2136f6deb0868\",\"license\":\"MIT\"},\"src/Guardian/implementations/UsingGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ncontract UsingGuardian {\\n\\tevent GuardianSet(address newGuardian);\\n\\n\\t// bytes32 GUARDIAN_SLOT = bytes32(uint256(keccak256('guardian')) - 1); // 0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27\\n\\n\\tconstructor(address initialGuardian) {\\n\\t\\tif (initialGuardian != address(0)) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tsstore(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27, initialGuardian)\\n\\t\\t\\t}\\n\\t\\t\\temit GuardianSet(initialGuardian);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules.\\n\\t/// For example: the royalty setup could be frozen.\\n\\tfunction guardian() external view returns (address g) {\\n\\t\\tassembly {\\n\\t\\t\\tg := sload(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27)\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice set the new guardian that can freeze the other admins (except owner).\\n\\t * Can only be called by the current guardian.\\n\\t */\\n\\tfunction setGuardian(address newGuardian) external {\\n\\t\\taddress currentGuardian;\\n\\t\\tassembly {\\n\\t\\t\\tcurrentGuardian := sload(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27)\\n\\t\\t}\\n\\t\\trequire(msg.sender == currentGuardian, \\\"NOT_AUTHORIZED\\\");\\n\\t\\tif (currentGuardian != newGuardian) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tsstore(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27, newGuardian)\\n\\t\\t\\t}\\n\\t\\t\\temit GuardianSet(newGuardian);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x25a774c20f7aaa92f2571237ff545588582b832da9deef69cd842cb907605a2e\",\"license\":\"MIT\"},\"src/Guardian/libraries/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary Guarded {\\n\\tfunction isGuardian(address sender, address newValue) internal view returns (bool) {\\n\\t\\taddress guardian;\\n\\t\\tassembly {\\n\\t\\t\\tguardian := sload(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27)\\n\\t\\t}\\n\\t\\treturn guardian != address(0) && sender == guardian && newValue == address(0);\\n\\t}\\n\\n\\tfunction isGuardian(address sender, uint256 newValue) internal view returns (bool) {\\n\\t\\taddress guardian;\\n\\t\\tassembly {\\n\\t\\t\\tguardian := sload(0x8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27)\\n\\t\\t}\\n\\t\\treturn guardian != address(0) && sender == guardian && newValue == 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4dfe3c98fb0eff032dca2f00700e4d3a0d94a23218675853045db21f456d0a95\",\"license\":\"MIT\"},\"src/Multicall/UsingMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract UsingMulticall {\\n\\tusing Address for address;\\n\\n\\t// from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\t/// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed.\\n\\t/// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n\\t/// @param data The encoded function data for each of the calls to make to this contract.\\n\\t/// @return results The results from each of the calls passed in via data.\\n\\tfunction multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n\\t\\tresults = new bytes[](data.length);\\n\\t\\tfor (uint256 i = 0; i < data.length; i++) {\\n\\t\\t\\t(bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t// Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n\\t\\t\\t\\tif (result.length < 68) revert();\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tresult := add(result, 0x04)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trevert(abi.decode(result, (string)));\\n\\t\\t\\t}\\n\\n\\t\\t\\tresults[i] = result;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xca668909e400d35b029b0700e065b1e3e26607ab4eebe9128179975b02e47628\",\"license\":\"MIT\"},\"src/TheBleepMachine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// _/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________________________/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____________________________________________/\\\\/\\\\______/\\\\/\\\\__________________________/\\\\/\\\\________/\\\\/\\\\___________________________\\n// _____/\\\\/\\\\______/\\\\/\\\\__________/\\\\/\\\\/\\\\________/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\______/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________________/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\___\\n// _____/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\_\\n// _____/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____________/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_______\\n// _____/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\____________/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\_\\n// _________________________________________________________________________________________/\\\\/\\\\_______________________________________________________________________________________________\\n\\n// The Bleep Machine Generates Music From Ethereum Bytecode.\\n\\n// Try the following:\\n// cast call --rpc-url https://rpc.bleeps.art machine.bleeps.eth \\\"WAV(bytes,uint256,uint256)(bytes)\\\" 0x808060081c9160091c600e1661ca98901c600f160217  0 100000 | xxd -r -p | aplay\\n// Note: this requires cast (see: https://github.com/foundry-rs) + aplay + xxd + a working ethereum rpc node.\\n\\n// Copyright (C) 2022 Ronan Sandford\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.16;\\n\\nerror MusicByteCodeTooLarge();\\nerror MusicContractCreationFailure();\\nerror MusicExecutionFailure();\\n\\ncontract TheBleepMachine {\\n\\t/// @notice Generates a WAV file (8 bits, 8000Hz, mono) from EVM bytecode (`musicBytecode`) with a specific offset and length.\\n\\t/// @param musicBytecode the evm bytecode that the Bleep Machine will execute in a loop.\\n\\t/// @param start sample offset at which the music starts.\\n\\t/// @param length the number of samples to generate.\\n\\t/// @return WAV file (8 bits, 8000Hz, mono).\\n\\tfunction WAV(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) external returns (bytes memory) {\\n\\t\\treturn _wrapInWAV(generate(musicBytecode, start, length));\\n\\t}\\n\\n\\t/// @notice Generates raw 8 bits samples from EVM bytecode (`musicBytecode`) with a specific offset and length.\\n\\t/// @param musicBytecode the evm bytecode that the Bleep Machine will execute in a loop.\\n\\t/// @param start sample offset at which the music starts.\\n\\t/// @param length the number of samples to generate.\\n\\t/// @return 8bit samples buffer.\\n\\tfunction generate(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) public returns (bytes memory) {\\n\\t\\t// We create the contract from the music bytecode.\\n\\t\\taddress executor = _create(musicBytecode);\\n\\n\\t\\t// Execute a call on the generated contract with the start and length specified.\\n\\t\\t// If the music bytecode behaves, it will create a buffer of length `length`.\\n\\t\\t(bool success, bytes memory buffer) = executor.staticcall(\\n\\t\\t\\tabi.encode((start & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | (length << 128))\\n\\t\\t);\\n\\n\\t\\t// If there is any error, we revert.\\n\\t\\tif (!success) {\\n\\t\\t\\trevert MusicExecutionFailure();\\n\\t\\t}\\n\\n\\t\\treturn buffer;\\n\\t}\\n\\n\\t// ----------------------------------------------------------------------------------------------------------------\\n\\t// INTERNAL\\n\\t// ----------------------------------------------------------------------------------------------------------------\\n\\n\\t/// @dev Creates a new contract that generate the music from a given start offset and length.\\n\\t/// @param musicBytecode the evm bytecode the Bleep Machine will execute in a loop.\\n\\t/// @return executor address of the contract that will generate samples when executed.\\n\\tfunction _create(bytes memory musicBytecode) public returns (address executor) {\\n\\t\\t// This code generates a contract creation-code that loops over the provided `musicBytecode`.\\n\\n\\t\\t// 61006d600081600b8239f3 => simply copy the code after it.\\n\\n\\t\\t// 6000358060801b806000529060801c60205260006040525b => prepare the data\\n\\t\\t// In particular it parse the calldata to extract start and length parameters (Stored in 128bit each)\\n\\t\\t// it then ensure that starting time is on top of the stack before the loop start\\n\\t\\t// the last `5b` is a JUMPDEST that will be jump to each time\\n\\n\\t\\t// 60ff9016604051806080019091905360010180604052602051600051600101806000529110601757602051806060526020016060f3\\n\\t\\t// => performs the loop and when it ends (start + time >= length), it copy the generate buffer in return data\\n\\n\\t\\tbytes memory executorCreation = bytes.concat(\\n\\t\\t\\thex\\\"61006d600081600b8239f36000358060801b806000529060801c60205260006040525b\\\",\\n\\t\\t\\tmusicBytecode,\\n\\t\\t\\thex\\\"60ff9016604051806080019091905360010180604052602051600051600101806000529110601757602051806060526020016060f3\\\"\\n\\t\\t);\\n\\t\\tuint256 len = musicBytecode.length;\\n\\n\\t\\t// We make sure the generated code length can be encoded in the PUSH2.\\n\\t\\tuint256 codeLen;\\n\\t\\tunchecked {\\n\\t\\t\\tcodeLen = 0x4d + len;\\n\\t\\t}\\n\\t\\tif (codeLen > 0xFFFF) {\\n\\t\\t\\trevert MusicByteCodeTooLarge();\\n\\t\\t}\\n\\n\\t\\t// We store the generated creationCode length so that the creationCode work with its new length.\\n\\t\\tassembly {\\n\\t\\t\\tmstore8(add(executorCreation, 33), shr(8, codeLen))\\n\\t\\t\\tmstore8(add(executorCreation, 34), and(codeLen, 0xFF))\\n\\t\\t}\\n\\n\\t\\t// We create the contract.\\n\\t\\tassembly {\\n\\t\\t\\texecutor := create(0, add(executorCreation, 32), mload(executorCreation))\\n\\t\\t}\\n\\n\\t\\t// If there is any error, we revert.\\n\\t\\tif (executor == address(0)) {\\n\\t\\t\\trevert MusicContractCreationFailure();\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Prepends the WAV file header for 8 bits samples at 8000Hz, mono sounds.\\n\\t/// @param samples 8 bits samples representing 8000Hz, mono sounds.\\n\\t/// @return WAV file (8 bits, 8000Hz, mono) made of the samples given.\\n\\tfunction _wrapInWAV(bytes memory samples) internal pure returns (bytes memory) {\\n\\t\\t// WAV file header, 8 bits, 8000Hz, mono, empty length.\\n\\t\\tbytes\\n\\t\\t\\tmemory dynHeader = hex\\\"524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000\\\";\\n\\n\\t\\tuint256 length = samples.length;\\n\\t\\tassembly {\\n\\t\\t\\t// Top header length is length of data + 36 bytes.\\n\\t\\t\\t// More precisely: (4 + (8 + SubChunk1Size) + (8 + SubChunk2Size)).\\n\\t\\t\\t// Where SubChunk1Size is 16 (for PCM) and SubChunk2Size is the length of the data.\\n\\t\\t\\tlet t := add(length, 36)\\n\\n\\t\\t\\t// We write that length info in the top header (in little endian).\\n\\t\\t\\tmstore8(add(dynHeader, 36), and(t, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 37), and(shr(8, t), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 38), and(shr(16, t), 0xFF))\\n\\n\\t\\t\\t// We also write the exact data length just before the data stream as per WAV file format spec (in little endian).\\n\\t\\t\\tmstore8(add(dynHeader, 72), and(length, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 73), and(shr(8, length), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 74), and(shr(16, length), 0xFF))\\n\\t\\t}\\n\\n\\t\\t// We concatenate the samples buffer we got from computing the music with the header above.\\n\\t\\treturn bytes.concat(dynHeader, samples);\\n\\t}\\n}\\n\",\"keccak256\":\"0xda662ecd3d351fe2d440464a15dd0cf0552d5018615317d52ce112131577c61c\",\"license\":\"AGPL-3.0-or-later\"},\"src/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nlibrary Utils {\\n\\tfunction numLeadingZeroes(uint256 x) internal pure returns (uint256) {\\n\\t\\tuint256 y;\\n\\t\\tuint256 n = 256;\\n\\t\\tunchecked {\\n\\t\\t\\ty = x >> 128;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 128;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 64;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 64;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 32;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 32;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 16;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 16;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 8;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 8;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 4;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 4;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 2;\\n\\t\\t\\tif (y != 0) {\\n\\t\\t\\t\\tn = n - 2;\\n\\t\\t\\t\\tx = y;\\n\\t\\t\\t}\\n\\t\\t\\ty = x >> 1;\\n\\t\\t\\tif (y != 0) return n - 2;\\n\\t\\t}\\n\\n\\t\\treturn n - x;\\n\\t}\\n}\\n\",\"keccak256\":\"0xad6e1645913a51590e3cbf8794d122f39c4a693a75e6caa549dea68131ec1282\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200530a3803806200530a8339810160408190526200003491620002ae565b466080819052839083908390879089906200004f8162000202565b60a052506001600160a01b03811615620000c4577f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a278190556040516001600160a01b03821681527fe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e9060200160405180910390a15b506001600160a01b038116156200012757600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c899060200160405180910390a15b506001600160a01b038116156200018a57600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef419060200160405180910390a15b6001600160a01b038316600160a01b6001600160601b03841690810282176007556040805192835260208301919091527fb744dc8fdcd17f69ad99fdabe0fe0ed8fea41193727ed2123d997550eaae918f910160405180910390a15050506001600160a01b0390951660c052506200034d9350505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666200024e60408051808201909152600b81526a426c65657020426561747360a81b602082015290565b80516020918201206040805192830193909352918101919091526060810183905230608082015260a001604051602081830303815290604052805190602001209050919050565b6001600160a01b0381168114620002ab57600080fd5b50565b60008060008060008060c08789031215620002c857600080fd5b8651620002d58162000295565b6020880151909650620002e88162000295565b6040880151909550620002fb8162000295565b60608801519094506200030e8162000295565b60808801519093506001600160601b03811681146200032c57600080fd5b60a08801519092506200033f8162000295565b809150509295509295509295565b60805160a05160c051614f866200038460003960008181610364015261182e01526000611e8301526000611e4e0152614f866000f3fe60806040526004361061024f5760003560e01c80637ba9638b11610138578063ab84ee6f116100b0578063b88d4fde1161007f578063e985e9c511610064578063e985e9c514610788578063f3945282146107d1578063fca3b5aa146107fe57600080fd5b8063b88d4fde14610748578063c87b56dd1461076857600080fd5b8063ab84ee6f146106c8578063ac9650d8146106e8578063adc5fcc214610708578063b510391f1461072857600080fd5b80638a0dac4a1161010757806399235f39116100ec57806399235f3914610668578063a22cb46514610688578063a754d48f146106a857600080fd5b80638a0dac4a1461060257806395d89b411461062257600080fd5b80637ba9638b146105645780637ecebe001461058457806384b0196e146105ba578063894e851f146105e257600080fd5b80632a55205a116101cb578063452a93201161019a5780636352211e1161017f5780636352211e1461050457806370a0823114610524578063745a41bc1461054457600080fd5b8063452a93201461049c578063585956d6146104d057600080fd5b80632a55205a146103f457806330adf81f146104335780633644e5151461046757806342842e0e1461047c57600080fd5b8063095ea7b311610222578063141a468c11610207578063141a468c1461038657806323b872dd146103b457806324d42fe7146103d457600080fd5b8063095ea7b3146103305780630dd74bd01461035257600080fd5b806301ffc9a71461025457806306fdde031461028957806307546172146102d8578063081812fc14610310575b600080fd5b34801561026057600080fd5b5061027461026f366004612b4d565b61081e565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b5060408051808201909152600b81527f426c65657020426561747300000000000000000000000000000000000000000060208201525b6040516102809190612bba565b3480156102e457600080fd5b506006546102f8906001600160a01b031681565b6040516001600160a01b039091168152602001610280565b34801561031c57600080fd5b506102f861032b366004612bcd565b61082f565b34801561033c57600080fd5b5061035061034b366004612bfd565b6108c4565b005b34801561035e57600080fd5b506102f87f000000000000000000000000000000000000000000000000000000000000000081565b34801561039257600080fd5b506103a66103a1366004612bcd565b6109c7565b604051908152602001610280565b3480156103c057600080fd5b506103506103cf366004612c27565b610a39565b3480156103e057600080fd5b506103506103ef366004612c63565b610c69565b34801561040057600080fd5b5061041461040f366004612cab565b610dd7565b604080516001600160a01b039093168352602083019190915201610280565b34801561043f57600080fd5b506103a67f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b34801561047357600080fd5b506103a6610e2f565b34801561048857600080fd5b50610350610497366004612c27565b610e3e565b3480156104a857600080fd5b507f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27546102f8565b3480156104dc57600080fd5b506103a67f29795620f29ed5790c945e3f419a1b3e2381aa07751ccffe5b81231639d74cd581565b34801561051057600080fd5b506102f861051f366004612bcd565b610e5e565b34801561053057600080fd5b506103a661053f366004612ccd565b610ebc565b34801561055057600080fd5b5061035061055f366004612dad565b610f30565b34801561057057600080fd5b5061035061057f366004612ccd565b61100d565b34801561059057600080fd5b506103a661059f366004612ccd565b6001600160a01b031660009081526004602052604090205490565b3480156105c657600080fd5b506105cf6110e0565b6040516102809796959493929190612e0e565b3480156105ee57600080fd5b506008546102f8906001600160a01b031681565b34801561060e57600080fd5b5061035061061d366004612ccd565b611158565b34801561062e57600080fd5b5060408051808201909152600381527f424253000000000000000000000000000000000000000000000000000000000060208201526102cb565b34801561067457600080fd5b50610350610683366004612ccd565b611239565b34801561069457600080fd5b506103506106a3366004612ec0565b611304565b3480156106b457600080fd5b506005546102f8906001600160a01b031681565b3480156106d457600080fd5b506103506106e3366004612ef1565b61130f565b6106fb6106f6366004612f86565b6113a5565b6040516102809190612fc8565b34801561071457600080fd5b506103a6610723366004612bcd565b6114fd565b34801561073457600080fd5b5061035061074336600461302a565b611508565b34801561075457600080fd5b50610350610763366004612ef1565b611573565b34801561077457600080fd5b506102cb610783366004612bcd565b61179d565b34801561079457600080fd5b506102746107a3366004613078565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b3480156107dd57600080fd5b506107f16107ec366004612f86565b611aac565b60405161028091906130a2565b34801561080a57600080fd5b50610350610819366004612ccd565b611bc5565b600061082982611c80565b92915050565b600081815260208190526040812054600160ff1b808216146001600160a01b0382166108965760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064015b60405180910390fd5b80156108ba575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b03821661092f5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b336001600160a01b038316148061096957506001600160a01b038216600090815260026020908152604080832033845290915290205460ff165b6109b55760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161088d565b6109c182828686611cd9565b50505050565b6000818152602081905260408120546affffffffffffffffffffff60a082901c166001600160a01b038216610a325760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b9392505050565b600081815260208190526040902054600160ff1b808216146001600160a01b038216610a9b5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b846001600160a01b0316826001600160a01b031614610afc5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161088d565b6001600160a01b038416610b525760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b03851603610baa5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b336001600160a01b03861614610c5757808015610bdd57506000838152600360205260409020546001600160a01b031633145b80610c0b57506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b610c575760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161088d565b610c62858585611daa565b5050505050565b6008546001600160a01b03163314610cb45760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6032816bffffffffffffffffffffffff161115610d135760405162461bcd60e51b815260206004820152601060248201527f524f59414c54595f544f4f5f4849474800000000000000000000000000000000604482015260640161088d565b6007546001600160a01b038381169116141580610d5b57506007546bffffffffffffffffffffffff828116740100000000000000000000000000000000000000009092041614155b15610dd3576001600160a01b038216740100000000000000000000000000000000000000006bffffffffffffffffffffffff831690810282176007556040805192835260208301919091527fb744dc8fdcd17f69ad99fdabe0fe0ed8fea41193727ed2123d997550eaae918f91015b60405180910390a15b5050565b6007546001600160a01b0381169060009061271090610e1c907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1685613110565b610e269190613145565b90509250929050565b6000610e39611e49565b905090565b610e5983838360405180602001604052806000815250611573565b505050565b6000818152602081905260409020546001600160a01b038116610eb75760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b919050565b60006001600160a01b038216610f145760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161088d565b506001600160a01b031660009081526001602052604090205490565b42821015610f805760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161088d565b6000838152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b038216610feb5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b610ff9828787878588611ea9565b61100582828888611cd9565b505050505050565b6008546001600160a01b031633148061102b575061102b3382611fd6565b6110685760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6008546001600160a01b038281169116146110dd576008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef41906020015b60405180910390a15b50565b60006060808280808346600d61112660408051808201909152600b81527f426c656570204265617473000000000000000000000000000000000000000000602082015290565b6040805160008082528183019092526020810182815260f89490941b9c929b5092995092975030965091945092509050565b7f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a2754336001600160a01b038216146111c35760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b816001600160a01b0316816001600160a01b031614610dd3577f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a278290556040516001600160a01b03831681527fe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e90602001610dca565b6005546001600160a01b031633148061125757506112573382611fd6565b6112945760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6005546001600160a01b038281169116146110dd576005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c89906020016110d4565b610dd333838361203f565b4282101561135f5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161088d565b6001600160a01b038416600090815260046020526040812080546113999287928792879290919061138f83613167565b91905055856120ca565b6109c18484600161203f565b60608167ffffffffffffffff8111156113c0576113c0612ce8565b6040519080825280602002602001820160405280156113f357816020015b60608152602001906001900390816113de5790505b50905060005b828110156114f6576000803086868581811061141757611417613181565b90506020028101906114299190613197565b6040516114379291906131fc565b600060405180830381855af49150503d8060008114611472576040519150601f19603f3d011682016040523d82523d6000602084013e611477565b606091505b5091509150816114c35760448151101561149057600080fd5b600481019050808060200190518101906114aa919061323c565b60405162461bcd60e51b815260040161088d9190612bba565b808484815181106114d6576114d6613181565b6020026020010181905250505080806114ee90613167565b9150506113f9565b5092915050565b6000610829826109c7565b8051602081111561155b5760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e47000000000000000000000000000000000000000000000000604482015260640161088d565b602082810151908290036008021c6109c181856121e7565b600082815260208190526040902054600160ff1b808216146001600160a01b0382166115d55760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b856001600160a01b0316826001600160a01b0316146116365760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161088d565b6001600160a01b03851661168c5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b038616036116e45760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b336001600160a01b038716146117915780801561171757506000848152600360205260409020546001600160a01b031633145b8061174557506001600160a01b038616600090815260026020908152604080832033845290915290205460ff165b6117915760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161088d565b61100586868686612313565b6060600060086117ac84612387565b816117b9576117b961312f565b04600890810293841b9391506000906117d483610100613285565b6117de9190613145565b67ffffffffffffffff8111156117f6576117f6612ce8565b6040519080825280601f01601f191660200182016040528015611820576020820181803683370190505b5090508360208201526118cc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c54e4fd836000620186a06040518463ffffffff1660e01b815260040161188093929190613298565b6000604051808303816000875af115801561189f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c7919081019061323c565b6124c5565b6040516020016118dc91906132d9565b604051602081830303815290604052925060005b6040811015611aa4576000611906600283613145565b9050600086826020811061191c5761191c613181565b1a90507f3031323334353637383961626364656630303030303030303030303030303030600482901c60ff166020811061195857611958613181565b1a60f81b8661196885602e613110565b611973856016613110565b61197e9060a7614e40565b61198a90610917614e40565b6119949190614e40565b815181106119a4576119a4613181565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656630303030303030303030303030303030600f821660208110611a0857611a08613181565b1a60f81b86611a1885602e613110565b611a23856016613110565b611a2e9060a7614e40565b611a3a90610917614e40565b611a4590602e614e40565b611a4f9190614e40565b81518110611a5f57611a5f613181565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050600281611a9d9190614e40565b90506118f0565b505050919050565b60608167ffffffffffffffff811115611ac757611ac7612ce8565b604051908082528060200260200182016040528015611b0c57816020015b6040805180820190915260008082526020820152815260200190600190039081611ae55790505b50905060005b828110156114f6576000806000868685818110611b3157611b31613181565b90506020020135815260200190815260200160002054905080838381518110611b5c57611b5c613181565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060a081901c6affffffffffffffffffffff16838381518110611ba457611ba4613181565b60209081029190910181015101525080611bbd81613167565b915050611b12565b6005546001600160a01b03163314611c105760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6006546001600160a01b038281169116146110dd576006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b6906020016110d4565b6000611c8b82612661565b806108295750507fffffffff00000000000000000000000000000000000000000000000000000000167f2a55205a000000000000000000000000000000000000000000000000000000001490565b6001600160a01b038216611d0c57600081815260208190526040902060a084901b6001600160a01b038616179055611d63565b600081815260208181526040808320600160ff1b6001600160a01b0389811660a08a901b17919091179091556003909252909120805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790555b80826001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6001600160a01b03808316600090815260016020819052604090912080549091019055831615611df5576001600160a01b038316600090815260016020526040902080546000190190555b6000818152602081905260408082204360a01b6001600160a01b0380871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114611e8157611e7c816126f9565b611ea3565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000611eb3610e2f565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c00160405160208183030381529060405280519060200120604051602001611f5e9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611f8187828461279d565b611fcd5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161088d565b50505050505050565b7f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27546000906001600160a01b038116158015906120245750806001600160a01b0316846001600160a01b0316145b801561203757506001600160a01b038316155b949350505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006120d4610e2f565b604080517f29795620f29ed5790c945e3f419a1b3e2381aa07751ccffe5b81231639d74cd560208201526001600160a01b03881691810191909152606081018590526080810186905260a001604051602081830303815290604052805190602001206040516020016121789291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061219b86828461279d565b6110055760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161088d565b6001600160a01b03811661223d5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b038216036122955760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b6000828152602081905260409020546001600160a01b038116156122fb5760405162461bcd60e51b815260206004820152600f60248201527f414c52454144595f435245415445440000000000000000000000000000000000604482015260640161088d565b610e5960008385604051806020016040528060008152505b61231e848484611daa565b6001600160a01b0383163b156109c15761233b3385858585612925565b6109c15760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161088d565b6000608082901c61010081156123bf5790925082907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80015b604084901c915081156123d6579092508290603f19015b602084901c915081156123ed579092508290601f19015b601084901c915081156124225790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b600884901c915081156124575790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600484901c9150811561248c5790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b600284901c915081156124a3579092508290600119015b600184901c915081156124bb57600119019392505050565b6120378482613285565b606081516000036124e457505060408051602081019091526000815290565b6000604051806060016040528060408152602001614f1160409139905060006003845160026125139190614e40565b61251d9190613145565b612528906004613110565b90506000612537826020614e40565b67ffffffffffffffff81111561254f5761254f612ce8565b6040519080825280601f01601f191660200182016040528015612579576020820181803683370190505b509050818152600183018586518101602084015b818310156125e5576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161258d565b6003895106600181146125ff576002811461262b57612653565b7f3d3d000000000000000000000000000000000000000000000000000000000000600119830152612653565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b509398975050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5604e22500000000000000000000000000000000000000000000000000000000148061082957507fffffffff0000000000000000000000000000000000000000000000000000000082167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86661275660408051808201909152600b81527f426c656570204265617473000000000000000000000000000000000000000000602082015290565b80516020918201206040805192830193909352918101919091526060810183905230608082015260a001604051602081830303815290604052805190602001209050919050565b60008060006127ac85856129ed565b909250905060008160048111156127c5576127c5614e53565b1480156127e35750856001600160a01b0316826001600160a01b0316145b156127f357600192505050610a32565b600080876001600160a01b0316631626ba7e60e01b888860405160240161281b929190614e69565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516128869190614e82565b600060405180830381855afa9150503d80600081146128c1576040519150601f19603f3d011682016040523d82523d6000602084013e6128c6565b606091505b50915091508180156128d9575080516020145b8015612919575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906129179083016020908101908401614e9e565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161295a9493929190614eb7565b6020604051808303816000875af1158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d9190614ef3565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b6000808251604103612a235760208301516040840151606085015160001a612a1787828585612a32565b94509450505050612a2b565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a695750600090506003612b16565b8460ff16601b14158015612a8157508460ff16601c14155b15612a925750600090506004612b16565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ae6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b0f57600060019250925050612b16565b9150600090505b94509492505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146110dd57600080fd5b600060208284031215612b5f57600080fd5b8135610a3281612b1f565b60005b83811015612b85578181015183820152602001612b6d565b50506000910152565b60008151808452612ba6816020860160208601612b6a565b601f01601f19169290920160200192915050565b602081526000610a326020830184612b8e565b600060208284031215612bdf57600080fd5b5035919050565b80356001600160a01b0381168114610eb757600080fd5b60008060408385031215612c1057600080fd5b612c1983612be6565b946020939093013593505050565b600080600060608486031215612c3c57600080fd5b612c4584612be6565b9250612c5360208501612be6565b9150604084013590509250925092565b60008060408385031215612c7657600080fd5b612c7f83612be6565b915060208301356bffffffffffffffffffffffff81168114612ca057600080fd5b809150509250929050565b60008060408385031215612cbe57600080fd5b50508035926020909101359150565b600060208284031215612cdf57600080fd5b610a3282612be6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d2757612d27612ce8565b604052919050565b600067ffffffffffffffff821115612d4957612d49612ce8565b50601f01601f191660200190565b600082601f830112612d6857600080fd5b8135612d7b612d7682612d2f565b612cfe565b818152846020838601011115612d9057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612dc357600080fd5b612dcc85612be6565b93506020850135925060408501359150606085013567ffffffffffffffff811115612df657600080fd5b612e0287828801612d57565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152612e4a60e084018a612b8e565b8381036040850152612e5c818a612b8e565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015612eae57835183529284019291840191600101612e92565b50909c9b505050505050505050505050565b60008060408385031215612ed357600080fd5b612edc83612be6565b915060208301358015158114612ca057600080fd5b60008060008060808587031215612f0757600080fd5b612f1085612be6565b9350612f1e60208601612be6565b925060408501359150606085013567ffffffffffffffff811115612df657600080fd5b60008083601f840112612f5357600080fd5b50813567ffffffffffffffff811115612f6b57600080fd5b6020830191508360208260051b8501011115612a2b57600080fd5b60008060208385031215612f9957600080fd5b823567ffffffffffffffff811115612fb057600080fd5b612fbc85828601612f41565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561301d57603f1988860301845261300b858351612b8e565b94509285019290850190600101612fef565b5092979650505050505050565b6000806040838503121561303d57600080fd5b61304683612be6565b9150602083013567ffffffffffffffff81111561306257600080fd5b61306e85828601612d57565b9150509250929050565b6000806040838503121561308b57600080fd5b61309483612be6565b9150610e2660208401612be6565b602080825282518282018190526000919060409081850190868401855b828110156130ed57815180516001600160a01b031685528601518685015292840192908501906001016130bf565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561312a5761312a6130fa565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261316257634e487b7160e01b600052601260045260246000fd5b500490565b6000600019820361317a5761317a6130fa565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131cc57600080fd5b83018035915067ffffffffffffffff8211156131e757600080fd5b602001915036819003821315612a2b57600080fd5b8183823760009101908152919050565b600061321a612d7684612d2f565b905082815283838301111561322e57600080fd5b610a32836020830184612b6a565b60006020828403121561324e57600080fd5b815167ffffffffffffffff81111561326557600080fd5b8201601f8101841361327657600080fd5b6120378482516020840161320c565b81810381811115610829576108296130fa565b6060815260006132ab6060830186612b8e565b60208301949094525060400152919050565b600081516132cf818560208601612b6a565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a225481527f6865253230426c6565702532304d616368696e65222c2264657363726970746960208201527f6f6e223a22546865253230426c6565702532304d616368696e6525323070726f60408201527f64756365732532306d7573696325323066726f6d25323045564d25323062797460608201527f65636f64652e222c2265787465726e616c5f75726c223a22544f444f222c226960808201527f6d616765223a220000000000000000000000000000000000000000000000000060a08201527f646174613a696d6167652f7376672b786d6c3b636861727365743d757466382c60a78201527f3c7376672532353230786d6c6e733d27687474703a2f2f7777772e77332e6f7260c78201527f672f323030302f73766727253235323073686170652d72656e646572696e673d60e78201527f276372697370456467657327253235323077696474683d2735313227253235326101078201527f306865696768743d27353132273e3c7374796c653e2a7b6261636b67726f756e6101278201527f642d636f6c6f723a77686974657d2e627b616e696d6174696f6e3a62612532356101478201527f323031732532353230737465707328352c7374617274292532353230696e66696101678201527f6e6974653b2d7765626b69742d616e696d6174696f6e3a6261253235323031736101878201527f2532353230737465707328352c7374617274292532353230696e66696e6974656101a78201527f3b7d406b65796672616d6573253235323062617b746f7b7669736962696c69746101c78201527f793a2068696464656e3b7d7d402d7765626b69742d6b65796672616d657325326101e78201527f35323062617b746f7b7669736962696c6974793a68696464656e3b7d7d2e62306102078201527f317b20616e696d6174696f6e2d64656c61793a2e303331737d2e6230327b616e6102278201527f696d6174696f6e2d64656c61793a2e303632737d2e6230337b616e696d6174696102478201527f6f6e2d64656c61793a2e303933737d2e6230347b616e696d6174696f6e2d64656102678201527f6c61793a2e313234737d2e6230357b616e696d6174696f6e2d64656c61793a2e6102878201527f313535737d2e6230367b616e696d6174696f6e2d64656c61793a2e313836737d6102a78201527f2e6230377b616e696d6174696f6e2d64656c61793a2e323137737d2e6230387b6102c78201527f616e696d6174696f6e2d64656c61793a2e323438737d2e6230397b616e696d616102e78201527f74696f6e2d64656c61793a2e323739737d2e6231307b616e696d6174696f6e2d6103078201527f64656c61793a2e333130737d2e6231317b616e696d6174696f6e2d64656c61796103278201527f3a2e333432737d2e6231327b616e696d6174696f6e2d64656c61793a2e3337336103478201527f737d2e6231337b616e696d6174696f6e2d64656c61793a2e343033737d2e62316103678201527f347b616e696d6174696f6e2d64656c61793a2e343334737d2e6231357b616e696103878201527f6d6174696f6e2d64656c61793a2e343635737d2e6231367b616e696d6174696f6103a78201527f6e2d64656c61793a2e343936737d2e6231377b616e696d6174696f6e2d64656c6103c78201527f61793a2e353237737d2e6231387b616e696d6174696f6e2d64656c61793a2e356103e78201527f3538737d2e6231397b616e696d6174696f6e2d64656c61793a2e353839737d2e6104078201527f6232307b616e696d6174696f6e2d64656c61793a2e363230737d2e6232317b616104278201527f6e696d6174696f6e2d64656c61793a2e363531737d2e6232327b616e696d61746104478201527f696f6e2d64656c61793a2e363832737d2e6232337b616e696d6174696f6e2d646104678201527f656c61793a2e373133737d2e6232347b616e696d6174696f6e2d64656c61793a6104878201527f2e373434737d2e6232357b616e696d6174696f6e2d64656c61793a2e373735736104a78201527f7d2e6232367b616e696d6174696f6e2d64656c61793a2e383036737d2e6232376104c78201527f7b616e696d6174696f6e2d64656c61793a2e383337737d2e6232387b616e696d6104e78201527f6174696f6e2d64656c61793a2e383638737d2e6232397b616e696d6174696f6e6105078201527f2d64656c61793a2e383939737d2e6233307b616e696d6174696f6e2d64656c616105278201527f793a2e393330737d2e6233317b616e696d6174696f6e2d64656c61793a2e39366105478201527f31737d2e6233327b616e696d6174696f6e2d64656c61793a2e393932737d3c2f6105678201527f7374796c653e3c646566733e3c70617468253235323069643d275a27253235326105878201527f30643d274d302c3068317631682d317a272f3e3c757365253235323069643d276105a78201527f30272532353230687265663d2725323532335a27253235323066696c6c3d27256105c78201527f32353233303030633234272f3e3c757365253235323069643d273127253235326105e78201527f30687265663d2725323532335a27253235323066696c6c3d27253235323339656106078201527f30393632272f3e3c757365253235323069643d2732272532353230687265663d6106278201527f2725323532335a27253235323066696c6c3d272532353233666631633361272f6106478201527f3e3c757365253235323069643d2733272532353230687265663d2725323532336106678201527f5a27253235323066696c6c3d272532353233626330623232272f3e3c757365256106878201527f3235323069643d2734272532353230687265663d2725323532335a27253235326106a78201527f3066696c6c3d272532353233666639393163272f3e3c757365253235323069646106c78201527f3d2735272532353230687265663d2725323532335a27253235323066696c6c3d6106e78201527f272532353233633136613030272f3e3c757365253235323069643d27362725326107078201527f353230687265663d2725323532335a27253235323066696c6c3d2725323532336107278201527f666665383163272f3e3c757365253235323069643d27372725323532306872656107478201527f663d2725323532335a27253235323066696c6c3d2725323532333965386230306107678201527f272f3e3c757365253235323069643d2738272532353230687265663d272532356107878201527f32335a27253235323066696c6c3d272532353233323365343233272f3e3c75736107a78201527f65253235323069643d2739272532353230687265663d2725323532335a2725326107c78201527f35323066696c6c3d272532353233303039393030272f3e3c75736525323532306107e78201527f69643d2761272532353230687265663d2725323532335a27253235323066696c6108078201527f6c3d272532353233316164646530272f3e3c757365253235323069643d2762276108278201527f2532353230687265663d2725323532335a27253235323066696c6c3d272532356108478201527f3233303038373839272f3e3c757365253235323069643d2763272532353230686108678201527f7265663d2725323532335a27253235323066696c6c3d272532353233336439376108878201527f6666272f3e3c757365253235323069643d2764272532353230687265663d27256108a78201527f323532335a27253235323066696c6c3d272532353233336535636130272f3e3c6108c78201527f757365253235323069643d2765272532353230687265663d2725323532335a276108e78201527f253235323066696c6c3d272532353233383331626639272f3e3c7573652532356109078201527f323069643d2766272532353230687265663d2725323532335a272532353230666109278201527f696c6c3d272532353233353232393832272f3e3c2f646566733e3c67253235326109478201527f307472616e73666f726d3d277363616c6528363429273e3c75736525323532306109678201527f783d273030272532353230636c6173733d2762253235323062303127253235326109878201527f30793d273030272532353230687265663d27253235323330272f3e3c757365256109a78201527f32353230783d273031272532353230793d273030272532353230687265663d276109c78201527f253235323330272f3e3c7573652532353230783d273032272532353230636c616109e78201527f73733d27622532353230623032272532353230793d2730302725323532306872610a078201527f65663d27253235323330272f3e3c7573652532353230783d2730332725323532610a278201527f30793d273030272532353230687265663d27253235323330272f3e3c75736525610a478201527f32353230783d273034272532353230636c6173733d2762253235323062303327610a678201527f2532353230793d273030272532353230687265663d27253235323330272f3e3c610a878201527f7573652532353230783d273035272532353230793d2730302725323532306872610aa78201527f65663d27253235323330272f3e3c7573652532353230783d2730362725323532610ac78201527f30636c6173733d27622532353230623034272532353230793d27303027253235610ae78201527f3230687265663d27253235323330272f3e3c7573652532353230783d27303727610b078201527f2532353230793d273030272532353230687265663d27253235323330272f3e3c610b278201527f7573652532353230783d273030272532353230636c6173733d27622532353230610b478201527f623035272532353230793d273031272532353230687265663d27253235323330610b678201527f272f3e3c7573652532353230783d273031272532353230793d27303127253235610b878201527f3230687265663d27253235323330272f3e3c7573652532353230783d27303227610ba78201527f2532353230636c6173733d27622532353230623036272532353230793d273031610bc782015260007f272532353230687265663d27253235323330272f3e3c7573652532353230783d80610be78401527f273033272532353230793d273031272532353230687265663d27253235323330610c078401527f272f3e3c7573652532353230783d273034272532353230636c6173733d27622580610c278501527f32353230623037272532353230793d273031272532353230687265663d272532610c478501527f35323330272f3e3c7573652532353230783d273035272532353230793d273031610c6785015281610c878501527f273036272532353230636c6173733d2762253235323062303827253235323079610ca78501527f3d273031272532353230687265663d27253235323330272f3e3c757365253235610cc78501527f3230783d273037272532353230793d273031272532353230687265663d272532610ce78501527f35323330272f3e3c7573652532353230783d273030272532353230636c61737380610d078601527f3d27622532353230623039272532353230793d27303227253235323068726566610d278601527f3d27253235323330272f3e3c7573652532353230783d2730312725323532307980610d478701527f3d273032272532353230687265663d27253235323330272f3e3c757365253235610d678701527f3230783d273032272532353230636c6173733d27622532353230623130272532610d878701527f353230793d273032272532353230687265663d27253235323330272f3e3c757380610da78801527f652532353230783d273033272532353230793d27303227253235323068726566610dc78801527f3d27253235323330272f3e3c7573652532353230783d2730342725323532306380610de78901527f6c6173733d27622532353230623131272532353230793d273032272532353230610e078901527f687265663d27253235323330272f3e3c7573652532353230783d27303527253280610e278a015282610e478a01527f652532353230783d273036272532353230636c6173733d276225323532306231610e678a01527f32272532353230793d273032272532353230687265663d27253235323330272f610e878a01527f3e3c7573652532353230783d273037272532353230793d273032272532353230610ea78a01527f687265663d27253235323330272f3e3c7573652532353230783d273030272532925082610ec78a01527f353230636c6173733d27622532353230623133272532353230793d2730332725610ee78a01527f32353230687265663d27253235323330272f3e3c7573652532353230783d273080610f078b01527f31272532353230793d273033272532353230687265663d27253235323330272f610f278b01527f3e3c7573652532353230783d273032272532353230636c6173733d276225323580610f478c01527f3230623134272532353230793d273033272532353230687265663d2725323532610f678c01527f3330272f3e3c7573652532353230783d273033272532353230793d2730332725610f878c015281610fa78c01527f34272532353230636c6173733d27622532353230623135272532353230793d27610fc78c01527f3033272532353230687265663d27253235323330272f3e3c757365253235323080610fe78d01527f783d273035272532353230793d273033272532353230687265663d27253235326110078d01527f3330272f3e3c7573652532353230783d273036272532353230636c6173733d27806110278e01527f622532353230623136272532353230793d273033272532353230687265663d276110478e01527f253235323330272f3e3c7573652532353230783d273037272532353230793d27806110678f0152826110878f01527f783d273030272532353230636c6173733d2762253235323062313727253235326110a78f01527f30793d273034272532353230687265663d27253235323330272f3e3c757365259250826110c78f01527f32353230783d273031272532353230793d273034272532353230687265663d276110e78f01527f253235323330272f3e3c7573652532353230783d273032272532353230636c616111078f01527f73733d27622532353230623138272532353230793d27303427253235323068726111278f01527f65663d27253235323330272f3e3c7573652532353230783d27303327253235326111478f0152826111678f01527f32353230783d273034272532353230636c6173733d27622532353230623139276111878f01527f2532353230793d273034272532353230687265663d27253235323330272f3e3c9250826111a78f01527f7573652532353230783d273035272532353230793d27303427253235323068726111c78f01527f65663d27253235323330272f3e3c7573652532353230783d27303627253235326111e78f01527f30636c6173733d27622532353230623230272532353230793d273034272532356112078f01527f3230687265663d27253235323330272f3e3c7573652532353230783d273037276112278f0152826112478f01527f7573652532353230783d273030272532353230636c6173733d276225323532306112678f01527f623231272532353230793d273035272532353230687265663d272532353233306112878f01527f272f3e3c7573652532353230783d273031272532353230793d273035272532356112a78f01527f3230687265663d27253235323330272f3e3c7573652532353230783d273032276112c78f01527f2532353230636c6173733d27622532353230623232272532353230793d2730356112e78f01528b6113078f01527f273033272532353230793d273035272532353230687265663d272532353233306113278f01528a6113478f01527f32353230623233272532353230793d273035272532353230687265663d2725326113678f01527f35323330272f3e3c7573652532353230783d273035272532353230793d2730356113878f01528b6113a78f01527f273036272532353230636c6173733d27622532353230623234272532353230796113c78f01527f3d273035272532353230687265663d27253235323330272f3e3c7573652532356113e78f01527f3230783d273037272532353230793d273035272532353230687265663d2725326114078f0152896114278f01527f3d27622532353230623235272532353230793d273036272532353230687265666114478f0152886114678f01527f3d273036272532353230687265663d27253235323330272f3e3c7573652532356114878f01527f3230783d273032272532353230636c6173733d276225323532306232362725326114a78f01527f353230793d273036272532353230687265663d27253235323330272f3e3c75739b508b6114c78f01527f652532353230783d273033272532353230793d273036272532353230687265666114e78f0152866115078f01527f6c6173733d27622532353230623237272532353230793d2730362725323532306115278f0152856115478f01528b6115678f01527f652532353230783d273036272532353230636c6173733d2762253235323062326115878f01527f38272532353230793d273036272532353230687265663d27253235323330272f6115a78f01527f3e3c7573652532353230783d273037272532353230793d2730362725323532306115c78f0152876115e78f01527f353230636c6173733d27622532353230623239272532353230793d27303727256116078f0152846116278f01527f31272532353230793d273037272532353230687265663d27253235323330272f6116478f0152836116678f01527f3230623330272532353230793d273037272532353230687265663d27253235326116878f01527f3330272f3e3c7573652532353230783d273033272532353230793d27303727256116a78f0152846116c78f01527f34272532353230636c6173733d27622532353230623331272532353230793d276116e78f01527f3037272532353230687265663d27253235323330272f3e3c75736525323532306117078f01527f783d273035272532353230793d273037272532353230687265663d27253235326117278f0152816117478f01527f622532353230623332272532353230793d273037272532353230687265663d276117678f0152806117878f01525050505050505050505050507f3037272532353230687265663d27253235323330272f3e3c2f673e3c2f7376676117a78301527f3e000000000000000000000000000000000000000000000000000000000000006117c7830152614e13614e0d6117c884017f222c22616e696d6174696f6e5f75726c223a22646174613a617564696f2f776181527f763b6261736536342c0000000000000000000000000000000000000000000000602082015260290190565b846132bd565b7f227d00000000000000000000000000000000000000000000000000000000000081526002019392505050565b80820180821115610829576108296130fa565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006120376040830184612b8e565b60008251614e94818460208701612b6a565b9190910192915050565b600060208284031215614eb057600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ee96080830184612b8e565b9695505050505050565b600060208284031215614f0557600080fd5b8151610a3281612b1f56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a3089e01732213f1836293630d52b124ebf8d5dc0be088bd807f2bbfe31a563b64736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061024f5760003560e01c80637ba9638b11610138578063ab84ee6f116100b0578063b88d4fde1161007f578063e985e9c511610064578063e985e9c514610788578063f3945282146107d1578063fca3b5aa146107fe57600080fd5b8063b88d4fde14610748578063c87b56dd1461076857600080fd5b8063ab84ee6f146106c8578063ac9650d8146106e8578063adc5fcc214610708578063b510391f1461072857600080fd5b80638a0dac4a1161010757806399235f39116100ec57806399235f3914610668578063a22cb46514610688578063a754d48f146106a857600080fd5b80638a0dac4a1461060257806395d89b411461062257600080fd5b80637ba9638b146105645780637ecebe001461058457806384b0196e146105ba578063894e851f146105e257600080fd5b80632a55205a116101cb578063452a93201161019a5780636352211e1161017f5780636352211e1461050457806370a0823114610524578063745a41bc1461054457600080fd5b8063452a93201461049c578063585956d6146104d057600080fd5b80632a55205a146103f457806330adf81f146104335780633644e5151461046757806342842e0e1461047c57600080fd5b8063095ea7b311610222578063141a468c11610207578063141a468c1461038657806323b872dd146103b457806324d42fe7146103d457600080fd5b8063095ea7b3146103305780630dd74bd01461035257600080fd5b806301ffc9a71461025457806306fdde031461028957806307546172146102d8578063081812fc14610310575b600080fd5b34801561026057600080fd5b5061027461026f366004612b4d565b61081e565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b5060408051808201909152600b81527f426c65657020426561747300000000000000000000000000000000000000000060208201525b6040516102809190612bba565b3480156102e457600080fd5b506006546102f8906001600160a01b031681565b6040516001600160a01b039091168152602001610280565b34801561031c57600080fd5b506102f861032b366004612bcd565b61082f565b34801561033c57600080fd5b5061035061034b366004612bfd565b6108c4565b005b34801561035e57600080fd5b506102f87f000000000000000000000000000000000000000000000000000000000000000081565b34801561039257600080fd5b506103a66103a1366004612bcd565b6109c7565b604051908152602001610280565b3480156103c057600080fd5b506103506103cf366004612c27565b610a39565b3480156103e057600080fd5b506103506103ef366004612c63565b610c69565b34801561040057600080fd5b5061041461040f366004612cab565b610dd7565b604080516001600160a01b039093168352602083019190915201610280565b34801561043f57600080fd5b506103a67f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b34801561047357600080fd5b506103a6610e2f565b34801561048857600080fd5b50610350610497366004612c27565b610e3e565b3480156104a857600080fd5b507f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27546102f8565b3480156104dc57600080fd5b506103a67f29795620f29ed5790c945e3f419a1b3e2381aa07751ccffe5b81231639d74cd581565b34801561051057600080fd5b506102f861051f366004612bcd565b610e5e565b34801561053057600080fd5b506103a661053f366004612ccd565b610ebc565b34801561055057600080fd5b5061035061055f366004612dad565b610f30565b34801561057057600080fd5b5061035061057f366004612ccd565b61100d565b34801561059057600080fd5b506103a661059f366004612ccd565b6001600160a01b031660009081526004602052604090205490565b3480156105c657600080fd5b506105cf6110e0565b6040516102809796959493929190612e0e565b3480156105ee57600080fd5b506008546102f8906001600160a01b031681565b34801561060e57600080fd5b5061035061061d366004612ccd565b611158565b34801561062e57600080fd5b5060408051808201909152600381527f424253000000000000000000000000000000000000000000000000000000000060208201526102cb565b34801561067457600080fd5b50610350610683366004612ccd565b611239565b34801561069457600080fd5b506103506106a3366004612ec0565b611304565b3480156106b457600080fd5b506005546102f8906001600160a01b031681565b3480156106d457600080fd5b506103506106e3366004612ef1565b61130f565b6106fb6106f6366004612f86565b6113a5565b6040516102809190612fc8565b34801561071457600080fd5b506103a6610723366004612bcd565b6114fd565b34801561073457600080fd5b5061035061074336600461302a565b611508565b34801561075457600080fd5b50610350610763366004612ef1565b611573565b34801561077457600080fd5b506102cb610783366004612bcd565b61179d565b34801561079457600080fd5b506102746107a3366004613078565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b3480156107dd57600080fd5b506107f16107ec366004612f86565b611aac565b60405161028091906130a2565b34801561080a57600080fd5b50610350610819366004612ccd565b611bc5565b600061082982611c80565b92915050565b600081815260208190526040812054600160ff1b808216146001600160a01b0382166108965760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064015b60405180910390fd5b80156108ba575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b03821661092f5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b336001600160a01b038316148061096957506001600160a01b038216600090815260026020908152604080832033845290915290205460ff165b6109b55760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161088d565b6109c182828686611cd9565b50505050565b6000818152602081905260408120546affffffffffffffffffffff60a082901c166001600160a01b038216610a325760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b9392505050565b600081815260208190526040902054600160ff1b808216146001600160a01b038216610a9b5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b846001600160a01b0316826001600160a01b031614610afc5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161088d565b6001600160a01b038416610b525760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b03851603610baa5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b336001600160a01b03861614610c5757808015610bdd57506000838152600360205260409020546001600160a01b031633145b80610c0b57506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b610c575760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161088d565b610c62858585611daa565b5050505050565b6008546001600160a01b03163314610cb45760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6032816bffffffffffffffffffffffff161115610d135760405162461bcd60e51b815260206004820152601060248201527f524f59414c54595f544f4f5f4849474800000000000000000000000000000000604482015260640161088d565b6007546001600160a01b038381169116141580610d5b57506007546bffffffffffffffffffffffff828116740100000000000000000000000000000000000000009092041614155b15610dd3576001600160a01b038216740100000000000000000000000000000000000000006bffffffffffffffffffffffff831690810282176007556040805192835260208301919091527fb744dc8fdcd17f69ad99fdabe0fe0ed8fea41193727ed2123d997550eaae918f91015b60405180910390a15b5050565b6007546001600160a01b0381169060009061271090610e1c907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1685613110565b610e269190613145565b90509250929050565b6000610e39611e49565b905090565b610e5983838360405180602001604052806000815250611573565b505050565b6000818152602081905260409020546001600160a01b038116610eb75760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b919050565b60006001600160a01b038216610f145760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161088d565b506001600160a01b031660009081526001602052604090205490565b42821015610f805760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161088d565b6000838152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b038216610feb5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b610ff9828787878588611ea9565b61100582828888611cd9565b505050505050565b6008546001600160a01b031633148061102b575061102b3382611fd6565b6110685760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6008546001600160a01b038281169116146110dd576008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef41906020015b60405180910390a15b50565b60006060808280808346600d61112660408051808201909152600b81527f426c656570204265617473000000000000000000000000000000000000000000602082015290565b6040805160008082528183019092526020810182815260f89490941b9c929b5092995092975030965091945092509050565b7f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a2754336001600160a01b038216146111c35760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b816001600160a01b0316816001600160a01b031614610dd3577f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a278290556040516001600160a01b03831681527fe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e90602001610dca565b6005546001600160a01b031633148061125757506112573382611fd6565b6112945760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6005546001600160a01b038281169116146110dd576005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c89906020016110d4565b610dd333838361203f565b4282101561135f5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161088d565b6001600160a01b038416600090815260046020526040812080546113999287928792879290919061138f83613167565b91905055856120ca565b6109c18484600161203f565b60608167ffffffffffffffff8111156113c0576113c0612ce8565b6040519080825280602002602001820160405280156113f357816020015b60608152602001906001900390816113de5790505b50905060005b828110156114f6576000803086868581811061141757611417613181565b90506020028101906114299190613197565b6040516114379291906131fc565b600060405180830381855af49150503d8060008114611472576040519150601f19603f3d011682016040523d82523d6000602084013e611477565b606091505b5091509150816114c35760448151101561149057600080fd5b600481019050808060200190518101906114aa919061323c565b60405162461bcd60e51b815260040161088d9190612bba565b808484815181106114d6576114d6613181565b6020026020010181905250505080806114ee90613167565b9150506113f9565b5092915050565b6000610829826109c7565b8051602081111561155b5760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e47000000000000000000000000000000000000000000000000604482015260640161088d565b602082810151908290036008021c6109c181856121e7565b600082815260208190526040902054600160ff1b808216146001600160a01b0382166115d55760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015260640161088d565b856001600160a01b0316826001600160a01b0316146116365760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161088d565b6001600160a01b03851661168c5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b038616036116e45760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b336001600160a01b038716146117915780801561171757506000848152600360205260409020546001600160a01b031633145b8061174557506001600160a01b038616600090815260026020908152604080832033845290915290205460ff165b6117915760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161088d565b61100586868686612313565b6060600060086117ac84612387565b816117b9576117b961312f565b04600890810293841b9391506000906117d483610100613285565b6117de9190613145565b67ffffffffffffffff8111156117f6576117f6612ce8565b6040519080825280601f01601f191660200182016040528015611820576020820181803683370190505b5090508360208201526118cc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c54e4fd836000620186a06040518463ffffffff1660e01b815260040161188093929190613298565b6000604051808303816000875af115801561189f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c7919081019061323c565b6124c5565b6040516020016118dc91906132d9565b604051602081830303815290604052925060005b6040811015611aa4576000611906600283613145565b9050600086826020811061191c5761191c613181565b1a90507f3031323334353637383961626364656630303030303030303030303030303030600482901c60ff166020811061195857611958613181565b1a60f81b8661196885602e613110565b611973856016613110565b61197e9060a7614e40565b61198a90610917614e40565b6119949190614e40565b815181106119a4576119a4613181565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656630303030303030303030303030303030600f821660208110611a0857611a08613181565b1a60f81b86611a1885602e613110565b611a23856016613110565b611a2e9060a7614e40565b611a3a90610917614e40565b611a4590602e614e40565b611a4f9190614e40565b81518110611a5f57611a5f613181565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050600281611a9d9190614e40565b90506118f0565b505050919050565b60608167ffffffffffffffff811115611ac757611ac7612ce8565b604051908082528060200260200182016040528015611b0c57816020015b6040805180820190915260008082526020820152815260200190600190039081611ae55790505b50905060005b828110156114f6576000806000868685818110611b3157611b31613181565b90506020020135815260200190815260200160002054905080838381518110611b5c57611b5c613181565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060a081901c6affffffffffffffffffffff16838381518110611ba457611ba4613181565b60209081029190910181015101525080611bbd81613167565b915050611b12565b6005546001600160a01b03163314611c105760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161088d565b6006546001600160a01b038281169116146110dd576006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b6906020016110d4565b6000611c8b82612661565b806108295750507fffffffff00000000000000000000000000000000000000000000000000000000167f2a55205a000000000000000000000000000000000000000000000000000000001490565b6001600160a01b038216611d0c57600081815260208190526040902060a084901b6001600160a01b038616179055611d63565b600081815260208181526040808320600160ff1b6001600160a01b0389811660a08a901b17919091179091556003909252909120805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790555b80826001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6001600160a01b03808316600090815260016020819052604090912080549091019055831615611df5576001600160a01b038316600090815260016020526040902080546000190190555b6000818152602081905260408082204360a01b6001600160a01b0380871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114611e8157611e7c816126f9565b611ea3565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000611eb3610e2f565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c00160405160208183030381529060405280519060200120604051602001611f5e9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611f8187828461279d565b611fcd5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161088d565b50505050505050565b7f8fbcb4375b910093bcf636b6b2f26b26eda2a29ef5a8ee7de44b5743c3bf9a27546000906001600160a01b038116158015906120245750806001600160a01b0316846001600160a01b0316145b801561203757506001600160a01b038316155b949350505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006120d4610e2f565b604080517f29795620f29ed5790c945e3f419a1b3e2381aa07751ccffe5b81231639d74cd560208201526001600160a01b03881691810191909152606081018590526080810186905260a001604051602081830303815290604052805190602001206040516020016121789291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061219b86828461279d565b6110055760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161088d565b6001600160a01b03811661223d5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161088d565b306001600160a01b038216036122955760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161088d565b6000828152602081905260409020546001600160a01b038116156122fb5760405162461bcd60e51b815260206004820152600f60248201527f414c52454144595f435245415445440000000000000000000000000000000000604482015260640161088d565b610e5960008385604051806020016040528060008152505b61231e848484611daa565b6001600160a01b0383163b156109c15761233b3385858585612925565b6109c15760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161088d565b6000608082901c61010081156123bf5790925082907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80015b604084901c915081156123d6579092508290603f19015b602084901c915081156123ed579092508290601f19015b601084901c915081156124225790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b600884901c915081156124575790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600484901c9150811561248c5790925082907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b600284901c915081156124a3579092508290600119015b600184901c915081156124bb57600119019392505050565b6120378482613285565b606081516000036124e457505060408051602081019091526000815290565b6000604051806060016040528060408152602001614f1160409139905060006003845160026125139190614e40565b61251d9190613145565b612528906004613110565b90506000612537826020614e40565b67ffffffffffffffff81111561254f5761254f612ce8565b6040519080825280601f01601f191660200182016040528015612579576020820181803683370190505b509050818152600183018586518101602084015b818310156125e5576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161258d565b6003895106600181146125ff576002811461262b57612653565b7f3d3d000000000000000000000000000000000000000000000000000000000000600119830152612653565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b509398975050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5604e22500000000000000000000000000000000000000000000000000000000148061082957507fffffffff0000000000000000000000000000000000000000000000000000000082167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86661275660408051808201909152600b81527f426c656570204265617473000000000000000000000000000000000000000000602082015290565b80516020918201206040805192830193909352918101919091526060810183905230608082015260a001604051602081830303815290604052805190602001209050919050565b60008060006127ac85856129ed565b909250905060008160048111156127c5576127c5614e53565b1480156127e35750856001600160a01b0316826001600160a01b0316145b156127f357600192505050610a32565b600080876001600160a01b0316631626ba7e60e01b888860405160240161281b929190614e69565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516128869190614e82565b600060405180830381855afa9150503d80600081146128c1576040519150601f19603f3d011682016040523d82523d6000602084013e6128c6565b606091505b50915091508180156128d9575080516020145b8015612919575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906129179083016020908101908401614e9e565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161295a9493929190614eb7565b6020604051808303816000875af1158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d9190614ef3565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b6000808251604103612a235760208301516040840151606085015160001a612a1787828585612a32565b94509450505050612a2b565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a695750600090506003612b16565b8460ff16601b14158015612a8157508460ff16601c14155b15612a925750600090506004612b16565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ae6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b0f57600060019250925050612b16565b9150600090505b94509492505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146110dd57600080fd5b600060208284031215612b5f57600080fd5b8135610a3281612b1f565b60005b83811015612b85578181015183820152602001612b6d565b50506000910152565b60008151808452612ba6816020860160208601612b6a565b601f01601f19169290920160200192915050565b602081526000610a326020830184612b8e565b600060208284031215612bdf57600080fd5b5035919050565b80356001600160a01b0381168114610eb757600080fd5b60008060408385031215612c1057600080fd5b612c1983612be6565b946020939093013593505050565b600080600060608486031215612c3c57600080fd5b612c4584612be6565b9250612c5360208501612be6565b9150604084013590509250925092565b60008060408385031215612c7657600080fd5b612c7f83612be6565b915060208301356bffffffffffffffffffffffff81168114612ca057600080fd5b809150509250929050565b60008060408385031215612cbe57600080fd5b50508035926020909101359150565b600060208284031215612cdf57600080fd5b610a3282612be6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d2757612d27612ce8565b604052919050565b600067ffffffffffffffff821115612d4957612d49612ce8565b50601f01601f191660200190565b600082601f830112612d6857600080fd5b8135612d7b612d7682612d2f565b612cfe565b818152846020838601011115612d9057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612dc357600080fd5b612dcc85612be6565b93506020850135925060408501359150606085013567ffffffffffffffff811115612df657600080fd5b612e0287828801612d57565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152612e4a60e084018a612b8e565b8381036040850152612e5c818a612b8e565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015612eae57835183529284019291840191600101612e92565b50909c9b505050505050505050505050565b60008060408385031215612ed357600080fd5b612edc83612be6565b915060208301358015158114612ca057600080fd5b60008060008060808587031215612f0757600080fd5b612f1085612be6565b9350612f1e60208601612be6565b925060408501359150606085013567ffffffffffffffff811115612df657600080fd5b60008083601f840112612f5357600080fd5b50813567ffffffffffffffff811115612f6b57600080fd5b6020830191508360208260051b8501011115612a2b57600080fd5b60008060208385031215612f9957600080fd5b823567ffffffffffffffff811115612fb057600080fd5b612fbc85828601612f41565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561301d57603f1988860301845261300b858351612b8e565b94509285019290850190600101612fef565b5092979650505050505050565b6000806040838503121561303d57600080fd5b61304683612be6565b9150602083013567ffffffffffffffff81111561306257600080fd5b61306e85828601612d57565b9150509250929050565b6000806040838503121561308b57600080fd5b61309483612be6565b9150610e2660208401612be6565b602080825282518282018190526000919060409081850190868401855b828110156130ed57815180516001600160a01b031685528601518685015292840192908501906001016130bf565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561312a5761312a6130fa565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261316257634e487b7160e01b600052601260045260246000fd5b500490565b6000600019820361317a5761317a6130fa565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131cc57600080fd5b83018035915067ffffffffffffffff8211156131e757600080fd5b602001915036819003821315612a2b57600080fd5b8183823760009101908152919050565b600061321a612d7684612d2f565b905082815283838301111561322e57600080fd5b610a32836020830184612b6a565b60006020828403121561324e57600080fd5b815167ffffffffffffffff81111561326557600080fd5b8201601f8101841361327657600080fd5b6120378482516020840161320c565b81810381811115610829576108296130fa565b6060815260006132ab6060830186612b8e565b60208301949094525060400152919050565b600081516132cf818560208601612b6a565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a225481527f6865253230426c6565702532304d616368696e65222c2264657363726970746960208201527f6f6e223a22546865253230426c6565702532304d616368696e6525323070726f60408201527f64756365732532306d7573696325323066726f6d25323045564d25323062797460608201527f65636f64652e222c2265787465726e616c5f75726c223a22544f444f222c226960808201527f6d616765223a220000000000000000000000000000000000000000000000000060a08201527f646174613a696d6167652f7376672b786d6c3b636861727365743d757466382c60a78201527f3c7376672532353230786d6c6e733d27687474703a2f2f7777772e77332e6f7260c78201527f672f323030302f73766727253235323073686170652d72656e646572696e673d60e78201527f276372697370456467657327253235323077696474683d2735313227253235326101078201527f306865696768743d27353132273e3c7374796c653e2a7b6261636b67726f756e6101278201527f642d636f6c6f723a77686974657d2e627b616e696d6174696f6e3a62612532356101478201527f323031732532353230737465707328352c7374617274292532353230696e66696101678201527f6e6974653b2d7765626b69742d616e696d6174696f6e3a6261253235323031736101878201527f2532353230737465707328352c7374617274292532353230696e66696e6974656101a78201527f3b7d406b65796672616d6573253235323062617b746f7b7669736962696c69746101c78201527f793a2068696464656e3b7d7d402d7765626b69742d6b65796672616d657325326101e78201527f35323062617b746f7b7669736962696c6974793a68696464656e3b7d7d2e62306102078201527f317b20616e696d6174696f6e2d64656c61793a2e303331737d2e6230327b616e6102278201527f696d6174696f6e2d64656c61793a2e303632737d2e6230337b616e696d6174696102478201527f6f6e2d64656c61793a2e303933737d2e6230347b616e696d6174696f6e2d64656102678201527f6c61793a2e313234737d2e6230357b616e696d6174696f6e2d64656c61793a2e6102878201527f313535737d2e6230367b616e696d6174696f6e2d64656c61793a2e313836737d6102a78201527f2e6230377b616e696d6174696f6e2d64656c61793a2e323137737d2e6230387b6102c78201527f616e696d6174696f6e2d64656c61793a2e323438737d2e6230397b616e696d616102e78201527f74696f6e2d64656c61793a2e323739737d2e6231307b616e696d6174696f6e2d6103078201527f64656c61793a2e333130737d2e6231317b616e696d6174696f6e2d64656c61796103278201527f3a2e333432737d2e6231327b616e696d6174696f6e2d64656c61793a2e3337336103478201527f737d2e6231337b616e696d6174696f6e2d64656c61793a2e343033737d2e62316103678201527f347b616e696d6174696f6e2d64656c61793a2e343334737d2e6231357b616e696103878201527f6d6174696f6e2d64656c61793a2e343635737d2e6231367b616e696d6174696f6103a78201527f6e2d64656c61793a2e343936737d2e6231377b616e696d6174696f6e2d64656c6103c78201527f61793a2e353237737d2e6231387b616e696d6174696f6e2d64656c61793a2e356103e78201527f3538737d2e6231397b616e696d6174696f6e2d64656c61793a2e353839737d2e6104078201527f6232307b616e696d6174696f6e2d64656c61793a2e363230737d2e6232317b616104278201527f6e696d6174696f6e2d64656c61793a2e363531737d2e6232327b616e696d61746104478201527f696f6e2d64656c61793a2e363832737d2e6232337b616e696d6174696f6e2d646104678201527f656c61793a2e373133737d2e6232347b616e696d6174696f6e2d64656c61793a6104878201527f2e373434737d2e6232357b616e696d6174696f6e2d64656c61793a2e373735736104a78201527f7d2e6232367b616e696d6174696f6e2d64656c61793a2e383036737d2e6232376104c78201527f7b616e696d6174696f6e2d64656c61793a2e383337737d2e6232387b616e696d6104e78201527f6174696f6e2d64656c61793a2e383638737d2e6232397b616e696d6174696f6e6105078201527f2d64656c61793a2e383939737d2e6233307b616e696d6174696f6e2d64656c616105278201527f793a2e393330737d2e6233317b616e696d6174696f6e2d64656c61793a2e39366105478201527f31737d2e6233327b616e696d6174696f6e2d64656c61793a2e393932737d3c2f6105678201527f7374796c653e3c646566733e3c70617468253235323069643d275a27253235326105878201527f30643d274d302c3068317631682d317a272f3e3c757365253235323069643d276105a78201527f30272532353230687265663d2725323532335a27253235323066696c6c3d27256105c78201527f32353233303030633234272f3e3c757365253235323069643d273127253235326105e78201527f30687265663d2725323532335a27253235323066696c6c3d27253235323339656106078201527f30393632272f3e3c757365253235323069643d2732272532353230687265663d6106278201527f2725323532335a27253235323066696c6c3d272532353233666631633361272f6106478201527f3e3c757365253235323069643d2733272532353230687265663d2725323532336106678201527f5a27253235323066696c6c3d272532353233626330623232272f3e3c757365256106878201527f3235323069643d2734272532353230687265663d2725323532335a27253235326106a78201527f3066696c6c3d272532353233666639393163272f3e3c757365253235323069646106c78201527f3d2735272532353230687265663d2725323532335a27253235323066696c6c3d6106e78201527f272532353233633136613030272f3e3c757365253235323069643d27362725326107078201527f353230687265663d2725323532335a27253235323066696c6c3d2725323532336107278201527f666665383163272f3e3c757365253235323069643d27372725323532306872656107478201527f663d2725323532335a27253235323066696c6c3d2725323532333965386230306107678201527f272f3e3c757365253235323069643d2738272532353230687265663d272532356107878201527f32335a27253235323066696c6c3d272532353233323365343233272f3e3c75736107a78201527f65253235323069643d2739272532353230687265663d2725323532335a2725326107c78201527f35323066696c6c3d272532353233303039393030272f3e3c75736525323532306107e78201527f69643d2761272532353230687265663d2725323532335a27253235323066696c6108078201527f6c3d272532353233316164646530272f3e3c757365253235323069643d2762276108278201527f2532353230687265663d2725323532335a27253235323066696c6c3d272532356108478201527f3233303038373839272f3e3c757365253235323069643d2763272532353230686108678201527f7265663d2725323532335a27253235323066696c6c3d272532353233336439376108878201527f6666272f3e3c757365253235323069643d2764272532353230687265663d27256108a78201527f323532335a27253235323066696c6c3d272532353233336535636130272f3e3c6108c78201527f757365253235323069643d2765272532353230687265663d2725323532335a276108e78201527f253235323066696c6c3d272532353233383331626639272f3e3c7573652532356109078201527f323069643d2766272532353230687265663d2725323532335a272532353230666109278201527f696c6c3d272532353233353232393832272f3e3c2f646566733e3c67253235326109478201527f307472616e73666f726d3d277363616c6528363429273e3c75736525323532306109678201527f783d273030272532353230636c6173733d2762253235323062303127253235326109878201527f30793d273030272532353230687265663d27253235323330272f3e3c757365256109a78201527f32353230783d273031272532353230793d273030272532353230687265663d276109c78201527f253235323330272f3e3c7573652532353230783d273032272532353230636c616109e78201527f73733d27622532353230623032272532353230793d2730302725323532306872610a078201527f65663d27253235323330272f3e3c7573652532353230783d2730332725323532610a278201527f30793d273030272532353230687265663d27253235323330272f3e3c75736525610a478201527f32353230783d273034272532353230636c6173733d2762253235323062303327610a678201527f2532353230793d273030272532353230687265663d27253235323330272f3e3c610a878201527f7573652532353230783d273035272532353230793d2730302725323532306872610aa78201527f65663d27253235323330272f3e3c7573652532353230783d2730362725323532610ac78201527f30636c6173733d27622532353230623034272532353230793d27303027253235610ae78201527f3230687265663d27253235323330272f3e3c7573652532353230783d27303727610b078201527f2532353230793d273030272532353230687265663d27253235323330272f3e3c610b278201527f7573652532353230783d273030272532353230636c6173733d27622532353230610b478201527f623035272532353230793d273031272532353230687265663d27253235323330610b678201527f272f3e3c7573652532353230783d273031272532353230793d27303127253235610b878201527f3230687265663d27253235323330272f3e3c7573652532353230783d27303227610ba78201527f2532353230636c6173733d27622532353230623036272532353230793d273031610bc782015260007f272532353230687265663d27253235323330272f3e3c7573652532353230783d80610be78401527f273033272532353230793d273031272532353230687265663d27253235323330610c078401527f272f3e3c7573652532353230783d273034272532353230636c6173733d27622580610c278501527f32353230623037272532353230793d273031272532353230687265663d272532610c478501527f35323330272f3e3c7573652532353230783d273035272532353230793d273031610c6785015281610c878501527f273036272532353230636c6173733d2762253235323062303827253235323079610ca78501527f3d273031272532353230687265663d27253235323330272f3e3c757365253235610cc78501527f3230783d273037272532353230793d273031272532353230687265663d272532610ce78501527f35323330272f3e3c7573652532353230783d273030272532353230636c61737380610d078601527f3d27622532353230623039272532353230793d27303227253235323068726566610d278601527f3d27253235323330272f3e3c7573652532353230783d2730312725323532307980610d478701527f3d273032272532353230687265663d27253235323330272f3e3c757365253235610d678701527f3230783d273032272532353230636c6173733d27622532353230623130272532610d878701527f353230793d273032272532353230687265663d27253235323330272f3e3c757380610da78801527f652532353230783d273033272532353230793d27303227253235323068726566610dc78801527f3d27253235323330272f3e3c7573652532353230783d2730342725323532306380610de78901527f6c6173733d27622532353230623131272532353230793d273032272532353230610e078901527f687265663d27253235323330272f3e3c7573652532353230783d27303527253280610e278a015282610e478a01527f652532353230783d273036272532353230636c6173733d276225323532306231610e678a01527f32272532353230793d273032272532353230687265663d27253235323330272f610e878a01527f3e3c7573652532353230783d273037272532353230793d273032272532353230610ea78a01527f687265663d27253235323330272f3e3c7573652532353230783d273030272532925082610ec78a01527f353230636c6173733d27622532353230623133272532353230793d2730332725610ee78a01527f32353230687265663d27253235323330272f3e3c7573652532353230783d273080610f078b01527f31272532353230793d273033272532353230687265663d27253235323330272f610f278b01527f3e3c7573652532353230783d273032272532353230636c6173733d276225323580610f478c01527f3230623134272532353230793d273033272532353230687265663d2725323532610f678c01527f3330272f3e3c7573652532353230783d273033272532353230793d2730332725610f878c015281610fa78c01527f34272532353230636c6173733d27622532353230623135272532353230793d27610fc78c01527f3033272532353230687265663d27253235323330272f3e3c757365253235323080610fe78d01527f783d273035272532353230793d273033272532353230687265663d27253235326110078d01527f3330272f3e3c7573652532353230783d273036272532353230636c6173733d27806110278e01527f622532353230623136272532353230793d273033272532353230687265663d276110478e01527f253235323330272f3e3c7573652532353230783d273037272532353230793d27806110678f0152826110878f01527f783d273030272532353230636c6173733d2762253235323062313727253235326110a78f01527f30793d273034272532353230687265663d27253235323330272f3e3c757365259250826110c78f01527f32353230783d273031272532353230793d273034272532353230687265663d276110e78f01527f253235323330272f3e3c7573652532353230783d273032272532353230636c616111078f01527f73733d27622532353230623138272532353230793d27303427253235323068726111278f01527f65663d27253235323330272f3e3c7573652532353230783d27303327253235326111478f0152826111678f01527f32353230783d273034272532353230636c6173733d27622532353230623139276111878f01527f2532353230793d273034272532353230687265663d27253235323330272f3e3c9250826111a78f01527f7573652532353230783d273035272532353230793d27303427253235323068726111c78f01527f65663d27253235323330272f3e3c7573652532353230783d27303627253235326111e78f01527f30636c6173733d27622532353230623230272532353230793d273034272532356112078f01527f3230687265663d27253235323330272f3e3c7573652532353230783d273037276112278f0152826112478f01527f7573652532353230783d273030272532353230636c6173733d276225323532306112678f01527f623231272532353230793d273035272532353230687265663d272532353233306112878f01527f272f3e3c7573652532353230783d273031272532353230793d273035272532356112a78f01527f3230687265663d27253235323330272f3e3c7573652532353230783d273032276112c78f01527f2532353230636c6173733d27622532353230623232272532353230793d2730356112e78f01528b6113078f01527f273033272532353230793d273035272532353230687265663d272532353233306113278f01528a6113478f01527f32353230623233272532353230793d273035272532353230687265663d2725326113678f01527f35323330272f3e3c7573652532353230783d273035272532353230793d2730356113878f01528b6113a78f01527f273036272532353230636c6173733d27622532353230623234272532353230796113c78f01527f3d273035272532353230687265663d27253235323330272f3e3c7573652532356113e78f01527f3230783d273037272532353230793d273035272532353230687265663d2725326114078f0152896114278f01527f3d27622532353230623235272532353230793d273036272532353230687265666114478f0152886114678f01527f3d273036272532353230687265663d27253235323330272f3e3c7573652532356114878f01527f3230783d273032272532353230636c6173733d276225323532306232362725326114a78f01527f353230793d273036272532353230687265663d27253235323330272f3e3c75739b508b6114c78f01527f652532353230783d273033272532353230793d273036272532353230687265666114e78f0152866115078f01527f6c6173733d27622532353230623237272532353230793d2730362725323532306115278f0152856115478f01528b6115678f01527f652532353230783d273036272532353230636c6173733d2762253235323062326115878f01527f38272532353230793d273036272532353230687265663d27253235323330272f6115a78f01527f3e3c7573652532353230783d273037272532353230793d2730362725323532306115c78f0152876115e78f01527f353230636c6173733d27622532353230623239272532353230793d27303727256116078f0152846116278f01527f31272532353230793d273037272532353230687265663d27253235323330272f6116478f0152836116678f01527f3230623330272532353230793d273037272532353230687265663d27253235326116878f01527f3330272f3e3c7573652532353230783d273033272532353230793d27303727256116a78f0152846116c78f01527f34272532353230636c6173733d27622532353230623331272532353230793d276116e78f01527f3037272532353230687265663d27253235323330272f3e3c75736525323532306117078f01527f783d273035272532353230793d273037272532353230687265663d27253235326117278f0152816117478f01527f622532353230623332272532353230793d273037272532353230687265663d276117678f0152806117878f01525050505050505050505050507f3037272532353230687265663d27253235323330272f3e3c2f673e3c2f7376676117a78301527f3e000000000000000000000000000000000000000000000000000000000000006117c7830152614e13614e0d6117c884017f222c22616e696d6174696f6e5f75726c223a22646174613a617564696f2f776181527f763b6261736536342c0000000000000000000000000000000000000000000000602082015260290190565b846132bd565b7f227d00000000000000000000000000000000000000000000000000000000000081526002019392505050565b80820180821115610829576108296130fa565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006120376040830184612b8e565b60008251614e94818460208701612b6a565b9190910192915050565b600060208284031215614eb057600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ee96080830184612b8e565b9695505050505050565b600060208284031215614f0557600080fd5b8151610a3281612b1f56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a3089e01732213f1836293630d52b124ebf8d5dc0be088bd807f2bbfe31a563b64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "constructor": {
        "details": "Setup the roles",
        "params": {
          "bleepMachine": "the Bleep Machine that generate the music",
          "imitialRoyaltyPer10Thousands": "amount of royalty in 10,000 basis point",
          "initialGuardian": "guardian able to immortalize rules",
          "initialMinterAdmin": "admin able to set the minter contract.",
          "initialRoyaltyAdmin": "admin able to update the royalty receiver and rates.",
          "initialRoyaltyReceiver": "receiver of royalties"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract."
        },
        "returns": {
          "results": "The results from each of the calls passed in via data."
        }
      },
      "nonces(address)": {
        "params": {
          "account": "the account to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "nonces(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "ids": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "": "//id - the token queried for royalty information.",
          "salePrice": "- the sale price of the token specified by id."
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment.",
          "royaltyAmount": "- the royalty payment amount for salePrice."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setRoyaltyParameters(address,uint96)": {
        "params": {
          "newReceiver": "the address that should receive the royalty proceeds.",
          "royaltyPer10Thousands": "the share of the salePrice (in 1/10000) given to the receiver."
        }
      },
      "tokenNonces(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to transfer a specific token on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "guardian()": {
        "notice": "guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules. For example: the royalty setup could be frozen."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "minter()": {
        "notice": "address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic Once all 1024 potential bleeps (there could be less, at minimum there are 576 bleeps) are minted, no minter can mint anymore"
      },
      "minterAdmin()": {
        "notice": "minterAdmin can update the minter. At the time being there is 576 Bleeps but there is space for extra instrument and the upper limit is 1024. could be given to the DAO later so instrument can be added, the sale of these new bleeps could benenfit the DAO too and add new members."
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed."
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract."
      },
      "nonces(address)": {
        "notice": "return the account nonce, used for approvalForAll permit or other account related matter"
      },
      "nonces(uint256)": {
        "notice": "return the token nonce, used for individual approve permit or other token related matter"
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "royaltyAdmin()": {
        "notice": "address allowed to set royalty parameters"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Called with the sale price to determine how much royalty is owed and to whom."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setGuardian(address)": {
        "notice": "set the new guardian that can freeze the other admins (except owner). Can only be called by the current guardian."
      },
      "setMinter(address)": {
        "notice": "set the new minter that can mint Can only be called by the minter admin."
      },
      "setMinterAdmin(address)": {
        "notice": "set the new minterAdmin that can set the minter for Bleeps Can only be called by the current minter admin."
      },
      "setRoyaltyAdmin(address)": {
        "notice": "set the new royaltyAdmin that can change the royalties Can only be called by the current royalty admin."
      },
      "setRoyaltyParameters(address,uint96)": {
        "notice": "set a new royalty receiver and rate, Can only be set by the `royaltyAdmin`."
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract."
      },
      "tokenNonces(uint256)": {
        "notice": "return the token nonce, used for individual approve permit or other token related matter"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2435,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2439,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2445,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2449,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2052,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_userNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3292,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "minterAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3295,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "minter",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1648,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "_royalty",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Royalty)1645_storage"
      },
      {
        "astId": 1651,
        "contract": "src/BleepBeats.sol:BleepBeats",
        "label": "royaltyAdmin",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Royalty)1645_storage": {
        "encoding": "inplace",
        "label": "struct UsingGlobalRoyalties.Royalty",
        "members": [
          {
            "astId": 1642,
            "contract": "src/BleepBeats.sol:BleepBeats",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1644,
            "contract": "src/BleepBeats.sol:BleepBeats",
            "label": "per10Thousands",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}