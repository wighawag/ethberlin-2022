{
  "address": "0x8c94701FA295AC020EFA95eF1013312eD562C349",
  "abi": [
    {
      "inputs": [],
      "name": "MusicByteCodeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MusicContractCreationFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MusicExecutionFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "musicBytecode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "WAV",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "musicBytecode",
          "type": "bytes"
        }
      ],
      "name": "_create",
      "outputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "musicBytecode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "generate",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "listenTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9684910ee550d83cde363e13f0090170834db10bb8b0411df2a7ed33882bb91",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": null,
    "transactionIndex": 33,
    "gasUsed": "449712",
    "logsBloom": "0x
    "blockHash": "0x6a553062b19632ecaa8a8e59d2042fbdf9841062ca010eb7d43213b06197e7a6",
    "transactionHash": "0xf9684910ee550d83cde363e13f0090170834db10bb8b0411df2a7ed33882bb91",
    "logs": [],
    "blockNumber": 7670344,
    "cumulativeGasUsed": "10860483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "bac997a89850219667a49e217fa17d21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MusicByteCodeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MusicContractCreationFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MusicExecutionFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"musicBytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"WAV\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"musicBytecode\",\"type\":\"bytes\"}],\"name\":\"_create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"musicBytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"listenTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WAV(bytes,uint256,uint256)\":{\"params\":{\"length\":\"the number of samples to generate.\",\"start\":\"sample offset at which the music starts.\"},\"returns\":{\"_0\":\"WAV file (8 bits, 8000Hz, mono).\"}},\"_create(bytes)\":{\"details\":\"Creates a new contract that generate the music from a given start offset and length.\",\"params\":{\"musicBytecode\":\"the EVM bytecode the Bleep Machine will execute in a loop.\"},\"returns\":{\"executor\":\"address of the contract that will generate samples when executed.\"}},\"generate(bytes,uint256,uint256)\":{\"params\":{\"length\":\"the number of samples to generate.\",\"musicBytecode\":\"the EVM bytecode that the Bleep Machine will execute in a loop.\",\"start\":\"sample offset at which the music starts.\"},\"returns\":{\"_0\":\"8 bits samples buffer.\"}},\"listenTo(address)\":{\"params\":{\"addr\":\"address of any contract. Most will generate noises.\"},\"returns\":{\"_0\":\"WAV file (8 bits, 8000Hz, mono).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WAV(bytes,uint256,uint256)\":{\"notice\":\"Generates a WAV file (8 bits, 8000Hz, mono) by executing the EVM bytecode provided (`musicBytecode`). The time offset is the only element on the stack at each loop iteration. Such offset starts at `start` and is increased by one for each iteration. The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration. The loop is executed `length` times to generate `length` samples which compose the music generated.\"},\"generate(bytes,uint256,uint256)\":{\"notice\":\"Generates raw 8 bits samples by executing the EVM bytecode provided (`musicBytecode`). The time offset is the only element on the stack at each loop iteration. Such offset starts at `start` and is increased by one for each iteration. The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration. The loop is executed `length` times to generate `length` samples which compose the music generated.\"},\"listenTo(address)\":{\"notice\":\"Generates a WAV file (8 bits, 8000Hz, mono) from contract's code at a specific address.\"},\"name()\":{\"notice\":\"return the name of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TheBleepMachine.sol\":\"TheBleepMachine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/TheBleepMachine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// _/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________________________/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____________________________________________/\\\\/\\\\______/\\\\/\\\\__________________________/\\\\/\\\\________/\\\\/\\\\___________________________\\n// _____/\\\\/\\\\______/\\\\/\\\\__________/\\\\/\\\\/\\\\________/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\______/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________________/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\___\\n// _____/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\_\\n// _____/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____________/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_______\\n// _____/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\____________/\\\\/\\\\______/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\_\\n// _________________________________________________________________________________________/\\\\/\\\\_______________________________________________________________________________________________\\n\\n// The Bleep Machine Generates Music From Executing Ethereum Bytecode.\\n\\n// It is an implementation of Bytebeat on the EVM.\\n//\\n// Try the following:\\n//\\n// cast call --rpc-url https://rpc.bleeps.art machine.bleeps.eth \\\"WAV(bytes,uint256,uint256)(bytes)\\\" 0x808060081c9160091c600e1661ca98901c600f160217  0 100000 | xxd -r -p | aplay\\n//\\n// This will execute the following formula: `t*(0xCA98>>(t>>9&14)&15)|t>>8` (taken from http://viznut.fi/texts-en/bytebeat_exploring_space.pdf)\\n//\\n// Note: this requires cast (see: https://github.com/foundry-rs) + aplay + xxd + a working ethereum rpc node.\\n\\n// Copyright (C) 2022 Ronan Sandford\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.16;\\n\\nerror MusicByteCodeTooLarge();\\nerror MusicContractCreationFailure();\\nerror MusicExecutionFailure();\\n\\ncontract TheBleepMachine {\\n\\t/// @notice return the name of the contract\\n\\tfunction name() external pure returns (string memory) {\\n\\t\\treturn \\\"The Bleep Machine\\\";\\n\\t}\\n\\n\\t/// @notice Generates a WAV file (8 bits, 8000Hz, mono) by executing the EVM bytecode provided (`musicBytecode`).\\n\\t/// The time offset is the only element on the stack at each loop iteration.\\n\\t/// Such offset starts at `start` and is increased by one for each iteration.\\n\\t/// The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration.\\n\\t/// The loop is executed `length` times to generate `length` samples which compose the music generated.\\n\\t/// @param start sample offset at which the music starts.\\n\\t/// @param length the number of samples to generate.\\n\\t/// @return WAV file (8 bits, 8000Hz, mono).\\n\\tfunction WAV(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) external returns (bytes memory) {\\n\\t\\treturn _wrapInWAV(generate(musicBytecode, start, length));\\n\\t}\\n\\n\\t/// @notice Generates raw 8 bits samples by executing the EVM bytecode provided (`musicBytecode`).\\n\\t/// The time offset is the only element on the stack at each loop iteration.\\n\\t/// Such offset starts at `start` and is increased by one for each iteration.\\n\\t/// The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration.\\n\\t/// The loop is executed `length` times to generate `length` samples which compose the music generated.\\n\\t/// @param musicBytecode the EVM bytecode that the Bleep Machine will execute in a loop.\\n\\t/// @param start sample offset at which the music starts.\\n\\t/// @param length the number of samples to generate.\\n\\t/// @return 8 bits samples buffer.\\n\\tfunction generate(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) public returns (bytes memory) {\\n\\t\\t// We create the contract from the music bytecode.\\n\\t\\taddress executor = _create(musicBytecode);\\n\\n\\t\\t// Execute a call on the generated contract with the start and length specified.\\n\\t\\t// If the music bytecode behaves, it will create a buffer of length `length`.\\n\\t\\t(bool success, bytes memory buffer) = executor.staticcall(\\n\\t\\t\\tabi.encode((start & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | (length << 128))\\n\\t\\t);\\n\\n\\t\\t// If there is any error, we revert.\\n\\t\\tif (!success) {\\n\\t\\t\\trevert MusicExecutionFailure();\\n\\t\\t}\\n\\n\\t\\treturn buffer;\\n\\t}\\n\\n\\t/// @notice Generates a WAV file (8 bits, 8000Hz, mono) from contract's code at a specific address.\\n\\t/// @param addr address of any contract. Most will generate noises.\\n\\t/// @return WAV file (8 bits, 8000Hz, mono).\\n\\tfunction listenTo(address addr) external view returns (bytes memory) {\\n\\t\\treturn _wrapInWAV(addr.code);\\n\\t}\\n\\n\\t// ----------------------------------------------------------------------------------------------------------------\\n\\t// INTERNAL\\n\\t// ----------------------------------------------------------------------------------------------------------------\\n\\n\\t/// @dev Creates a new contract that generate the music from a given start offset and length.\\n\\t/// @param musicBytecode the EVM bytecode the Bleep Machine will execute in a loop.\\n\\t/// @return executor address of the contract that will generate samples when executed.\\n\\tfunction _create(bytes memory musicBytecode) public returns (address executor) {\\n\\t\\t// This code generates a contract creation-code that loops over the provided `musicBytecode`.\\n\\n\\t\\t// 61006d600081600b8239f3 => simply copy the code after it.\\n\\n\\t\\t// 6000358060801b60801c806000529060801c60205260006040525b => prepare the data\\n\\t\\t// In particular it parses the call-data to extract the start and length parameters (Stored in 128bit each).\\n\\t\\t// It then ensures that the starting time is on top of the stack before the loop starts.\\n\\t\\t// The last `5b` is a JUMPDEST that will be jumped to at each iteration.\\n\\n\\t\\t// 60ff9016604051806080019091905360010180604052602051600051600101806000529110601a57602051806060526020016060f3\\n\\t\\t// => Performs the loop and when it ends (start + time >= length), it copy the generated buffer in return data.\\n\\n\\t\\tbytes memory executorCreation = bytes.concat(\\n\\t\\t\\thex\\\"61006d600081600b8239f36000358060801b60801c806000529060801c60205260006040525b\\\",\\n\\t\\t\\tmusicBytecode,\\n\\t\\t\\thex\\\"60ff9016604051806080019091905360010180604052602051600051600101806000529110601a57602051806060526020016060f3\\\"\\n\\t\\t);\\n\\t\\tuint256 len = musicBytecode.length;\\n\\n\\t\\t// We make sure the generated code length can be encoded in the PUSH2.\\n\\t\\tuint256 codeLen;\\n\\t\\tunchecked {\\n\\t\\t\\tcodeLen = 0x50 + len;\\n\\t\\t}\\n\\t\\tif (codeLen > 0xFFFF) {\\n\\t\\t\\trevert MusicByteCodeTooLarge();\\n\\t\\t}\\n\\n\\t\\t// We store the generated creationCode length so that the creationCode work with its new length.\\n\\t\\tassembly {\\n\\t\\t\\tmstore8(add(executorCreation, 33), shr(8, codeLen))\\n\\t\\t\\tmstore8(add(executorCreation, 34), and(codeLen, 0xFF))\\n\\t\\t}\\n\\n\\t\\t// We create the contract.\\n\\t\\tassembly {\\n\\t\\t\\texecutor := create(0, add(executorCreation, 32), mload(executorCreation))\\n\\t\\t}\\n\\n\\t\\t// If there is any error, we revert.\\n\\t\\tif (executor == address(0)) {\\n\\t\\t\\trevert MusicContractCreationFailure();\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Prepends the WAV file header for 8 bits samples at 8000Hz, mono sounds.\\n\\t/// @param samples 8 bits samples representing 8000Hz, mono sounds.\\n\\t/// @return WAV file (8 bits, 8000Hz, mono) made of the samples given.\\n\\tfunction _wrapInWAV(bytes memory samples) internal pure returns (bytes memory) {\\n\\t\\t// WAV file header, 8 bits, 8000Hz, mono, empty length.\\n\\t\\tbytes\\n\\t\\t\\tmemory dynHeader = hex\\\"524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000\\\";\\n\\n\\t\\tuint256 length = samples.length;\\n\\t\\tassembly {\\n\\t\\t\\t// Top header length is length of data + 36 bytes.\\n\\t\\t\\t// More precisely: (4 + (8 + SubChunk1Size) + (8 + SubChunk2Size)).\\n\\t\\t\\t// Where SubChunk1Size is 16 (for PCM) and SubChunk2Size is the length of the data.\\n\\t\\t\\tlet t := add(length, 36)\\n\\n\\t\\t\\t// We write that length info in the top header (in little-endian).\\n\\t\\t\\tmstore8(add(dynHeader, 36), and(t, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 37), and(shr(8, t), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 38), and(shr(16, t), 0xFF))\\n\\n\\t\\t\\t// We also write the exact data length just before the data stream as per WAV file format spec (in little-endian).\\n\\t\\t\\tmstore8(add(dynHeader, 72), and(length, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 73), and(shr(8, length), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 74), and(shr(16, length), 0xFF))\\n\\t\\t}\\n\\n\\t\\t// We concatenate the samples buffer we got from computing the music with the header above.\\n\\t\\treturn bytes.concat(dynHeader, samples);\\n\\t}\\n}\\n\",\"keccak256\":\"0xed4880b496278677fc96c936d9d9f9b00fd86fb100973520672935806e86e384\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610732806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806344eea1e01161005057806344eea1e0146100ca5780635734d351146100dd5780635a3efa661461011557600080fd5b806306fdde031461006c5780632c54e4fd146100b7575b600080fd5b60408051808201909152601181527f54686520426c656570204d616368696e6500000000000000000000000000000060208201525b6040516100ae919061043e565b60405180910390f35b6100a16100c5366004610514565b610128565b6100a16100d8366004610562565b610145565b6100f06100eb366004610598565b610188565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ae565b6100a1610123366004610514565b610263565b606061013d610138858585610263565b610357565b949350505050565b60606101828273ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c610357565b92915050565b6000808260405160200161019c91906105cd565b60408051601f1981840301815291905283519091506050810161ffff8111156101f1576040517f90860d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060081c602184015360ff811660228401538251602084016000f0935073ffffffffffffffffffffffffffffffffffffffff841661025b576040517fd4cefffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050919050565b6060600061027085610188565b90506000808273ffffffffffffffffffffffffffffffffffffffff16608086901b876fffffffffffffffffffffffffffffffff16176040516020016102b791815260200190565b60408051601f19818403018152908290526102d191610685565b600060405180830381855afa9150503d806000811461030c576040519150601f19603f3d011682016040523d82523d6000602084013e610311565b606091505b50915091508161034d576040517fdae8c31100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9695505050505050565b606060006040518060600160405280602c81526020016106d1602c913990506000835190506024810160ff8116602484015360ff8160081c16602584015360ff8160101c1660268401535060ff8116604883015360ff8160081c16604983015360ff8160101c16604a83015381846040516020016103d69291906106a1565b60405160208183030381529060405292505050919050565b60005b838110156104095781810151838201526020016103f1565b50506000910152565b6000815180845261042a8160208601602086016103ee565b601f01601f19169290920160200192915050565b6020815260006104516020830184610412565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261049857600080fd5b813567ffffffffffffffff808211156104b3576104b3610458565b604051601f8301601f19908116603f011681019082821181831017156104db576104db610458565b816040528381528660208588010111156104f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561052957600080fd5b833567ffffffffffffffff81111561054057600080fd5b61054c86828701610487565b9660208601359650604090950135949350505050565b60006020828403121561057457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461045157600080fd5b6000602082840312156105aa57600080fd5b813567ffffffffffffffff8111156105c157600080fd5b61013d84828501610487565b7f61006d600081600b8239f36000358060801b60801c806000529060801c60205281527f60006040525b000000000000000000000000000000000000000000000000000060208201526000825161062b8160268501602087016103ee565b7f60ff90166040518060800190919053600101806040526020516000516001018060269390910192830152507f6000529110601a57602051806060526020016060f300000000000000000000006046820152605b01919050565b600082516106978184602087016103ee565b9190910192915050565b600083516106b38184602088016103ee565b8351908301906106c78183602088016103ee565b0194935050505056fe524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000a264697066735822122019933aec216ee8a4103d536ea51fbdb9185d3cc67dcdca48f07270422d19c8fc64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806344eea1e01161005057806344eea1e0146100ca5780635734d351146100dd5780635a3efa661461011557600080fd5b806306fdde031461006c5780632c54e4fd146100b7575b600080fd5b60408051808201909152601181527f54686520426c656570204d616368696e6500000000000000000000000000000060208201525b6040516100ae919061043e565b60405180910390f35b6100a16100c5366004610514565b610128565b6100a16100d8366004610562565b610145565b6100f06100eb366004610598565b610188565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ae565b6100a1610123366004610514565b610263565b606061013d610138858585610263565b610357565b949350505050565b60606101828273ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c610357565b92915050565b6000808260405160200161019c91906105cd565b60408051601f1981840301815291905283519091506050810161ffff8111156101f1576040517f90860d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060081c602184015360ff811660228401538251602084016000f0935073ffffffffffffffffffffffffffffffffffffffff841661025b576040517fd4cefffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050919050565b6060600061027085610188565b90506000808273ffffffffffffffffffffffffffffffffffffffff16608086901b876fffffffffffffffffffffffffffffffff16176040516020016102b791815260200190565b60408051601f19818403018152908290526102d191610685565b600060405180830381855afa9150503d806000811461030c576040519150601f19603f3d011682016040523d82523d6000602084013e610311565b606091505b50915091508161034d576040517fdae8c31100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9695505050505050565b606060006040518060600160405280602c81526020016106d1602c913990506000835190506024810160ff8116602484015360ff8160081c16602584015360ff8160101c1660268401535060ff8116604883015360ff8160081c16604983015360ff8160101c16604a83015381846040516020016103d69291906106a1565b60405160208183030381529060405292505050919050565b60005b838110156104095781810151838201526020016103f1565b50506000910152565b6000815180845261042a8160208601602086016103ee565b601f01601f19169290920160200192915050565b6020815260006104516020830184610412565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261049857600080fd5b813567ffffffffffffffff808211156104b3576104b3610458565b604051601f8301601f19908116603f011681019082821181831017156104db576104db610458565b816040528381528660208588010111156104f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561052957600080fd5b833567ffffffffffffffff81111561054057600080fd5b61054c86828701610487565b9660208601359650604090950135949350505050565b60006020828403121561057457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461045157600080fd5b6000602082840312156105aa57600080fd5b813567ffffffffffffffff8111156105c157600080fd5b61013d84828501610487565b7f61006d600081600b8239f36000358060801b60801c806000529060801c60205281527f60006040525b000000000000000000000000000000000000000000000000000060208201526000825161062b8160268501602087016103ee565b7f60ff90166040518060800190919053600101806040526020516000516001018060269390910192830152507f6000529110601a57602051806060526020016060f300000000000000000000006046820152605b01919050565b600082516106978184602087016103ee565b9190910192915050565b600083516106b38184602088016103ee565b8351908301906106c78183602088016103ee565b0194935050505056fe524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000a264697066735822122019933aec216ee8a4103d536ea51fbdb9185d3cc67dcdca48f07270422d19c8fc64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "WAV(bytes,uint256,uint256)": {
        "params": {
          "length": "the number of samples to generate.",
          "start": "sample offset at which the music starts."
        },
        "returns": {
          "_0": "WAV file (8 bits, 8000Hz, mono)."
        }
      },
      "_create(bytes)": {
        "details": "Creates a new contract that generate the music from a given start offset and length.",
        "params": {
          "musicBytecode": "the EVM bytecode the Bleep Machine will execute in a loop."
        },
        "returns": {
          "executor": "address of the contract that will generate samples when executed."
        }
      },
      "generate(bytes,uint256,uint256)": {
        "params": {
          "length": "the number of samples to generate.",
          "musicBytecode": "the EVM bytecode that the Bleep Machine will execute in a loop.",
          "start": "sample offset at which the music starts."
        },
        "returns": {
          "_0": "8 bits samples buffer."
        }
      },
      "listenTo(address)": {
        "params": {
          "addr": "address of any contract. Most will generate noises."
        },
        "returns": {
          "_0": "WAV file (8 bits, 8000Hz, mono)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WAV(bytes,uint256,uint256)": {
        "notice": "Generates a WAV file (8 bits, 8000Hz, mono) by executing the EVM bytecode provided (`musicBytecode`). The time offset is the only element on the stack at each loop iteration. Such offset starts at `start` and is increased by one for each iteration. The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration. The loop is executed `length` times to generate `length` samples which compose the music generated."
      },
      "generate(bytes,uint256,uint256)": {
        "notice": "Generates raw 8 bits samples by executing the EVM bytecode provided (`musicBytecode`). The time offset is the only element on the stack at each loop iteration. Such offset starts at `start` and is increased by one for each iteration. The code is expected to provide an 8 bits sample as the only element in the stack at the end of each iteration. The loop is executed `length` times to generate `length` samples which compose the music generated."
      },
      "listenTo(address)": {
        "notice": "Generates a WAV file (8 bits, 8000Hz, mono) from contract's code at a specific address."
      },
      "name()": {
        "notice": "return the name of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}