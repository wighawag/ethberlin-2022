{
  "address": "0x047cf11753517792d53455DF9Eec7aBeB1bBee5E",
  "abi": [
    {
      "inputs": [],
      "name": "MusicByteCodeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MusicContractCreationFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MusicExecutionFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "musicBytecode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "play",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ea3db0f17dbb71be678a099a2356897fb8c0d5468ffe8af147a05ac784ad5a0",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x047cf11753517792d53455DF9Eec7aBeB1bBee5E",
    "transactionIndex": 53,
    "gasUsed": "495801",
    "logsBloom": "0x
    "blockHash": "0x0e398c935289751d5720d5490e759eff330c65e14807ac3529f84d79055a550e",
    "transactionHash": "0x8ea3db0f17dbb71be678a099a2356897fb8c0d5468ffe8af147a05ac784ad5a0",
    "logs": [],
    "blockNumber": 7663491,
    "cumulativeGasUsed": "15114163",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f5024fc722410516bde35e2c13ebbe4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MusicByteCodeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MusicContractCreationFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MusicExecutionFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"musicBytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TheBleepMachine.sol\":\"TheBleepMachine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/TheBleepMachine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.16;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nerror MusicByteCodeTooLarge();\\nerror MusicContractCreationFailure();\\nerror MusicExecutionFailure();\\n\\ncontract TheBleepMachine{\\n\\n\\tfunction play(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) external returns (string memory) {\\n\\t\\tbytes\\n\\t\\t\\tmemory dynHeader = hex\\\"524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000\\\";\\n\\t\\tassembly {\\n\\t\\t\\tlet t := add(length, 36)\\n\\t\\t\\tmstore8(add(dynHeader, 36), and(t, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 37), and(shr(8, t), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 38), and(shr(16, t), 0xFF))\\n\\n\\t\\t\\tmstore8(add(dynHeader, 72), and(length, 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 73), and(shr(8, length), 0xFF))\\n\\t\\t\\tmstore8(add(dynHeader, 74), and(shr(16, length), 0xFF))\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tbytes.concat(\\n\\t\\t\\t\\t\\t\\\"data:audio/wav;base64,\\\",\\n\\t\\t\\t\\t\\tbytes(Base64.encode(bytes.concat(dynHeader, _execute(musicBytecode, start, length))))\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _execute(\\n\\t\\tbytes memory musicBytecode,\\n\\t\\tuint256 start,\\n\\t\\tuint256 length\\n\\t) internal returns (bytes memory) {\\n\\t\\tbytes memory executorCreation = bytes.concat(\\n            hex\\\"61006d600081600b8239f36000358060801b806000529060801c60205260006040525b\\\",\\n\\t\\t\\tmusicBytecode,\\n\\t\\t\\thex\\\"60ff9016604051806080019091905360010180604052602051600051600101806000529110601757602051806060526020016060f3\\\"\\n\\t\\t);\\n        uint256 len = musicBytecode.length;\\n\\n\\n        uint256 codeLen;\\n        unchecked {\\n            codeLen = 0x4d + len;\\n        }\\n        if( codeLen > 0xFFFF) {\\n            revert MusicByteCodeTooLarge();\\n        }\\n        assembly {\\n            mstore8(add(executorCreation, 33), shr(8, codeLen))\\n\\t\\t\\tmstore8(add(executorCreation, 34), and(codeLen, 0xFF))\\n\\t\\t}\\n\\n\\t\\taddress executor;\\n\\t\\tassembly {\\n\\t\\t\\texecutor := create(0, add(executorCreation, 32), mload(executorCreation))\\n\\t\\t}\\n\\n\\t\\tif(executor == address(0)) {\\n            revert MusicContractCreationFailure();\\n        }\\n\\n\\t\\t(bool success, bytes memory buffer) = executor.staticcall(abi.encode(start | (length << 128)));\\n\\t\\tif (!success) {\\n            revert MusicExecutionFailure();\\n        }\\n\\n\\t\\treturn buffer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1b87d224cb5c91f62197ade77175a620cb671232e37e8cb870c220ec43c9e2f4\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061080d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635704545b14610030575b600080fd5b61004361003e366004610498565b610059565b6040516100509190610580565b60405180910390f35b606060006040518060600160405280602c815260200161076c602c913990506024830160ff8116602483015360ff8160081c16602583015360ff8160101c1660268301535060ff8316604882015360ff8360081c16604982015360ff8360101c16604a8201536100f3816100ce87878761011c565b6040516020016100df9291906105b3565b6040516020818303038152906040526102c8565b60405160200161010391906105e2565b6040516020818303038152906040529150509392505050565b60606000846040516020016101319190610627565b60408051601f198184030181529190528551909150604d810161ffff811115610186576040517f90860d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060081c602184015360ff8116602284015360008351602085016000f0905073ffffffffffffffffffffffffffffffffffffffff81166101f2576040517fd4cefffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16608089901b8a1760405160200161022591815260200190565b60408051601f198184030181529082905261023f916106df565b600060405180830381855afa9150503d806000811461027a576040519150601f19603f3d011682016040523d82523d6000602084013e61027f565b606091505b5091509150816102bb576040517fdae8c31100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9998505050505050505050565b606081516000036102e757505060408051602081019091526000815290565b600060405180606001604052806040815260200161079860409139905060006003845160026103169190610711565b610320919061072a565b61032b90600461074c565b9050600061033a826020610711565b67ffffffffffffffff81111561035257610352610482565b6040519080825280601f01601f19166020018201604052801561037c576020820181803683370190505b509050818152600183018586518101602084015b818310156103e8576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101610390565b600389510660018114610402576002811461044c57610474565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152610474565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156104ad57600080fd5b833567ffffffffffffffff808211156104c557600080fd5b818601915086601f8301126104d957600080fd5b8135818111156104eb576104eb610482565b604051601f8201601f19908116603f0116810190838211818310171561051357610513610482565b8160405282815289602084870101111561052c57600080fd5b82602086016020830137600060208483010152809750505050505060208401359150604084013590509250925092565b60005b8381101561057757818101518382015260200161055f565b50506000910152565b602081526000825180602084015261059f81604085016020870161055c565b601f01601f19169190910160400192915050565b600083516105c581846020880161055c565b8351908301906105d981836020880161055c565b01949350505050565b7f646174613a617564696f2f7761763b6261736536342c0000000000000000000081526000825161061a81601685016020870161055c565b9190910160160192915050565b7f61006d600081600b8239f36000358060801b806000529060801c60205260006081527f40525b000000000000000000000000000000000000000000000000000000000060208201526000825161068581602385016020870161055c565b7f60ff90166040518060800190919053600101806040526020516000516001018060239390910192830152507f6000529110601757602051806060526020016060f300000000000000000000006043820152605801919050565b600082516106f181846020870161055c565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610724576107246106fb565b92915050565b60008261074757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610766576107666106fb565b50029056fe524946460000000057415645666d74201000000001000100401f0000401f00000100080064617461000000004142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208c457334c520d6f390e056c68a95a18cd897d946816f7ad59d6624afefcff2f864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80635704545b14610030575b600080fd5b61004361003e366004610498565b610059565b6040516100509190610580565b60405180910390f35b606060006040518060600160405280602c815260200161076c602c913990506024830160ff8116602483015360ff8160081c16602583015360ff8160101c1660268301535060ff8316604882015360ff8360081c16604982015360ff8360101c16604a8201536100f3816100ce87878761011c565b6040516020016100df9291906105b3565b6040516020818303038152906040526102c8565b60405160200161010391906105e2565b6040516020818303038152906040529150509392505050565b60606000846040516020016101319190610627565b60408051601f198184030181529190528551909150604d810161ffff811115610186576040517f90860d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060081c602184015360ff8116602284015360008351602085016000f0905073ffffffffffffffffffffffffffffffffffffffff81166101f2576040517fd4cefffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16608089901b8a1760405160200161022591815260200190565b60408051601f198184030181529082905261023f916106df565b600060405180830381855afa9150503d806000811461027a576040519150601f19603f3d011682016040523d82523d6000602084013e61027f565b606091505b5091509150816102bb576040517fdae8c31100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9998505050505050505050565b606081516000036102e757505060408051602081019091526000815290565b600060405180606001604052806040815260200161079860409139905060006003845160026103169190610711565b610320919061072a565b61032b90600461074c565b9050600061033a826020610711565b67ffffffffffffffff81111561035257610352610482565b6040519080825280601f01601f19166020018201604052801561037c576020820181803683370190505b509050818152600183018586518101602084015b818310156103e8576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101610390565b600389510660018114610402576002811461044c57610474565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152610474565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156104ad57600080fd5b833567ffffffffffffffff808211156104c557600080fd5b818601915086601f8301126104d957600080fd5b8135818111156104eb576104eb610482565b604051601f8201601f19908116603f0116810190838211818310171561051357610513610482565b8160405282815289602084870101111561052c57600080fd5b82602086016020830137600060208483010152809750505050505060208401359150604084013590509250925092565b60005b8381101561057757818101518382015260200161055f565b50506000910152565b602081526000825180602084015261059f81604085016020870161055c565b601f01601f19169190910160400192915050565b600083516105c581846020880161055c565b8351908301906105d981836020880161055c565b01949350505050565b7f646174613a617564696f2f7761763b6261736536342c0000000000000000000081526000825161061a81601685016020870161055c565b9190910160160192915050565b7f61006d600081600b8239f36000358060801b806000529060801c60205260006081527f40525b000000000000000000000000000000000000000000000000000000000060208201526000825161068581602385016020870161055c565b7f60ff90166040518060800190919053600101806040526020516000516001018060239390910192830152507f6000529110601757602051806060526020016060f300000000000000000000006043820152605801919050565b600082516106f181846020870161055c565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610724576107246106fb565b92915050565b60008261074757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610766576107666106fb565b50029056fe524946460000000057415645666d74201000000001000100401f0000401f00000100080064617461000000004142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208c457334c520d6f390e056c68a95a18cd897d946816f7ad59d6624afefcff2f864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}