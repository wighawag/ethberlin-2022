{
  "language": "Solidity",
  "sources": {
    "src/TheBleepMachine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// _/\\/\\/\\/\\/\\/\\__/\\/\\________________________/\\/\\/\\/\\/\\____/\\/\\____________________________________________/\\/\\______/\\/\\__________________________/\\/\\________/\\/\\___________________________\n// _____/\\/\\______/\\/\\__________/\\/\\/\\________/\\/\\____/\\/\\__/\\/\\______/\\/\\/\\______/\\/\\/\\____/\\/\\/\\/\\________/\\/\\/\\__/\\/\\/\\__/\\/\\/\\________/\\/\\/\\/\\__/\\/\\________________/\\/\\/\\/\\______/\\/\\/\\___\n// _____/\\/\\______/\\/\\/\\/\\____/\\/\\/\\/\\/\\______/\\/\\/\\/\\/\\____/\\/\\____/\\/\\/\\/\\/\\__/\\/\\/\\/\\/\\__/\\/\\__/\\/\\______/\\/\\/\\/\\/\\/\\/\\______/\\/\\____/\\/\\________/\\/\\/\\/\\____/\\/\\____/\\/\\__/\\/\\__/\\/\\/\\/\\/\\_\n// _____/\\/\\______/\\/\\__/\\/\\__/\\/\\____________/\\/\\____/\\/\\__/\\/\\____/\\/\\________/\\/\\________/\\/\\/\\/\\________/\\/\\__/\\__/\\/\\__/\\/\\/\\/\\____/\\/\\________/\\/\\__/\\/\\__/\\/\\____/\\/\\__/\\/\\__/\\/\\_______\n// _____/\\/\\______/\\/\\__/\\/\\____/\\/\\/\\/\\______/\\/\\/\\/\\/\\____/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\__/\\/\\____________/\\/\\______/\\/\\__/\\/\\/\\/\\/\\____/\\/\\/\\/\\__/\\/\\__/\\/\\__/\\/\\/\\__/\\/\\__/\\/\\____/\\/\\/\\/\\_\n// _________________________________________________________________________________________/\\/\\_______________________________________________________________________________________________\n\n// The Bleep Machine Generates Music From Ethereum bytecode\n\n// Copyright (C) 2022 Ronan Sandford\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.16;\n\nerror MusicByteCodeTooLarge();\nerror MusicContractCreationFailure();\nerror MusicExecutionFailure();\n\ncontract TheBleepMachine {\n\tfunction play(\n\t\tbytes memory musicBytecode,\n\t\tuint256 start,\n\t\tuint256 length\n\t) external returns (string memory) {\n\t\tbytes\n\t\t\tmemory dynHeader = hex\"524946460000000057415645666d74201000000001000100401f0000401f0000010008006461746100000000\";\n\t\tassembly {\n\t\t\tlet t := add(length, 36)\n\t\t\tmstore8(add(dynHeader, 36), and(t, 0xFF))\n\t\t\tmstore8(add(dynHeader, 37), and(shr(8, t), 0xFF))\n\t\t\tmstore8(add(dynHeader, 38), and(shr(16, t), 0xFF))\n\n\t\t\tmstore8(add(dynHeader, 72), and(length, 0xFF))\n\t\t\tmstore8(add(dynHeader, 73), and(shr(8, length), 0xFF))\n\t\t\tmstore8(add(dynHeader, 74), and(shr(16, length), 0xFF))\n\t\t}\n\n\t\treturn\n\t\t\tstring(\n\t\t\t\tbytes.concat(\n\t\t\t\t\t\"data:audio/wav;base64,\",\n\t\t\t\t\tbytes(Base64.encode(bytes.concat(dynHeader, _execute(musicBytecode, start, length))))\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tfunction _execute(\n\t\tbytes memory musicBytecode,\n\t\tuint256 start,\n\t\tuint256 length\n\t) internal returns (bytes memory) {\n\t\tbytes memory executorCreation = bytes.concat(\n\t\t\thex\"61006d600081600b8239f36000358060801b806000529060801c60205260006040525b\",\n\t\t\tmusicBytecode,\n\t\t\thex\"60ff9016604051806080019091905360010180604052602051600051600101806000529110601757602051806060526020016060f3\"\n\t\t);\n\t\tuint256 len = musicBytecode.length;\n\n\t\tuint256 codeLen;\n\t\tunchecked {\n\t\t\tcodeLen = 0x4d + len;\n\t\t}\n\t\tif (codeLen > 0xFFFF) {\n\t\t\trevert MusicByteCodeTooLarge();\n\t\t}\n\t\tassembly {\n\t\t\tmstore8(add(executorCreation, 33), shr(8, codeLen))\n\t\t\tmstore8(add(executorCreation, 34), and(codeLen, 0xFF))\n\t\t}\n\n\t\taddress executor;\n\t\tassembly {\n\t\t\texecutor := create(0, add(executorCreation, 32), mload(executorCreation))\n\t\t}\n\n\t\tif (executor == address(0)) {\n\t\t\trevert MusicContractCreationFailure();\n\t\t}\n\n\t\t(bool success, bytes memory buffer) = executor.staticcall(abi.encode(start | (length << 128)));\n\t\tif (!success) {\n\t\t\trevert MusicExecutionFailure();\n\t\t}\n\n\t\treturn buffer;\n\t}\n}\n\n\n// Following is Taken from https://github.com/Brechtpd/base64\n\n// MIT License\n\n// Copyright (c) 2021 Brecht Devos\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}